# Physics and Astronomy Exam assessment code# Takes in exam grids (csv files) and produces output exam grids, with averages etc.# This version is for AY2020/2021## This script requires Pandas with xlswriter (default writer for pandas, as long as v>0.16)## Checked:#    BSc Physics: year marks (std and C19), overall marks#    MPhys Physics: year marks (std and C19), overall marks#    BSc M+P#    MPhys M+P#    Study Europe (requires '[3A]' in programme name) marks#    1st year (2018/19) incl M+P#    2nd year (2018/19)#    3rd year (2018/19) progressing## Still working on:## Year 2+3 M+P - Phyics mark and overall marks to be averaged correctly### Known issues to keep in mind:## 1. Cannot handle "PRO" marks. For the single student with "PRO" in the grid, we will ignore in this code.# 2. Does not not handling Physics with Study in Europe 2-3 progression fully (needs S3 mark which is not available/easy to compute).#    The code treats them as normal MPhys students - the Phys/Euro coordinator will check these few by hand.# 3. Y3 MPhys progression - progress string not used### MODIFICATION HISTORY## 12-May-2021  C. Dickinson   Started with updated PyAssessV5.py from Rob Appelby# Specific changes made for AY 2020/2021 (not including tidying up/reformatting etc.)## 1. 13-May-2021: Changed borderlines for 2021 regs (2,2,3) rather than (3,3,4) below borders# 2. 13-May-2021: Removed output Maths only columns for non-M+P students# 3. 13-May-2021: Added deg class string for outputing to final grid (rather than a single number)# 4. 14-May-2021: Changed credit weighting for PHYS20811 # 5. 17-May-2021: Added projectmark calculation for alg B promotion #                 Added P(A) or P(B) string to deg class if promoted (keeping original class for grid)# 6. 18-May-2021: Correct a few bugs in the projectmark calculation (used for alg B promotion ony)#                 Added creditstogetMPHYSalgA for alg A in 4th year#                 Added creditstogetalgB for alg B  #                 Removed algA/B columns because it is now stated in deg classification# 7. 21-May-2021  class=4=32 non-M+P done and checked# 8. 03-Jun-2021  Removed first column index from output Excel files#                 Removed remaining ND variables#                 Put back mathunit=1 for Maths mark!# 9. 04-Jun-2021  Added O/M/P strings for M+P students#                 Fixed Year3 Mark for 4th year M+P students#10. 10-Jun-2021  Fixed reading in of X, XL codes etc due to stripping of columns with no header (commented out)#11. 14-Jun-2021  Tidying up, removing giverealcredits, adjusting output filenames#12. 15-Jun-2021  Added column width adjustments for output Excel spreadsheet#13. 16-Jun-2021  Bug fixes for classyear=31 and output changes#                 Changed 3-4 progression credits >80 (rather than 2/3 of taken)#14. 17-Jun-2021  Added back PHYS30811 into credit weights for mean mark for resitting students#                 Included progression for years 1 and 2 including MPhys #15. 18-Jun-2021  Removed noresit list containing 2nd year courses for 2019/20 only (it uses if 0 credits, no resit)#                 Removed Study with Europe additional progression criteria (2-3) - just use standard MPhys#                 Added deferthiscourse to X1 and XL codes and _D for code to be output later#                 Removed PHYS20161 from core list for triggered resits#                 Year 1/2 progresion rules updated #16. 22-Jun-2021  3rd year progression rules added#                 Added Status string for progression including A/D for deferalls#17. 24-Jun-2021  Added REVW/A/D to status after progression rules#18. 25-Jun-2021  Added calculation for overall mark for 2nd years when deganalysis==1 set (when CF available)                  #                 Added code to not crash if CF file not available for 2nd year (mostly a hack just in case!)#19. 26-Jun-2021  Added function to remove unused units in "ignore_units" array to save space on output columns#20. 27-Jun-2021  Added MATH SX000 and some other courses not needed to ignore list#                 Added deferredcredits variable to take into account credits for Y1/2 progression#21  28-Jun-2021  Can now read in .csv or xls/.xlsx files, automatically detects extension#                 Extra X_C, XN_R, XN_C codes added on output decided by mark#                 Added _R or _C back to stumarks for output later, but only take numeric number to float#22  29-Jun-2021  Add _R for any resits at the end in the, in case resits not triggered and remove _R if failed#                 Combined core/option to 1 column for referrals/columns on output#23  30-Jun-2021  Add _C for compensated courses for output#                 Fixed deferredcredits rules and code determinations#24. 01-Jul-2021  Fixed status=A/D only when no referred courses#                 Removed unnecessary resit codes when is a straight FAIL#                 Added sortdata option to sort by final year/overall mark#                 Added addcodes option to add codes at the bottom of the spreadshet#                 Added warning if progression rules (Y1/Y2) not activated in IF loops (i.e. found a loop hole)#                 M+P Y1 prog rules implemented, but inside current Y1 loop (***needs to come out I think)#25. 02-Jul-2021  Lots of small bug fixes to output _C codes and bug fix to resitting courses for 2nd years (still going through)#26. 03-Jul-2021  Fixed R/BSc and R/X codes that should be REVW if there are resits#                 Added coloured banding and slightly different height to the output#27. 04-Jul-2021  Fixed bug where MPhys not checked in progtaken when considering R/X and R/BSc codes#                 Fixed overall mark for classyear=31 which wasn't being computed#28  05-July-2021 Catch for when year3mark file not available in 4th year (M+P) just to take straight average#                 Fixed overall mark for 3rd years#                 Removed _D from XL if not Y1/Y2#                 Adjusted BSc status strings for failed/borderline 3rd year MPhys students with REVW before it#                 Added M+P >45% in both M+P requirement for progression################################################################## imports#from typing import Anyimport pandas as pdimport numpy as npimport sys#import matplotlib.pyplot as plt#from scipy.stats import linregress#import itertools#from decimal import Decimalpd.options.mode.chained_assignment = None  # default='warn'# used for skipping first few rows of CS grid (note system dependent)def rowskiplogic(index):    if index==0 or index==1 or index==2 or index==3:       return True    return Falsedef rowskiplogiccourse(index):    if index==0 or index==1 or index==2 or index==3:       return True    return False# convert degree class to a string for output griddef degclass_to_string(progtaken,degclass):    # deg classification    degclass_dict = {        4:"1",        3:"2:1",        2:"2:2",        1:"3",        0:"Ord.",        -1:"Fail",        -2:"NOT SET!!!"}    # degree type    degstr = progtaken.split('(')[0] + ' '                return degstr + degclass_dict[degclass]# function to remove unused units and resequence unit numbers in the student Data Frame (to save space on output later)# optionally remove "Unnamed" at the same time (this can only be done at the end so not to lose the codes needed earlier!)def remove_unused_units(dataframe,ignore_list,remove_unnamed=False):        # Find max unit number for shifting data later    columns = dataframe.columns.values    max_unit_number = 1    # get max unit number and just unit columns    unit_columns = np.array([' '])    for j in np.arange(columns.size):        if (columns[j].split()[0] == 'Unit'):            unit_columns = np.append(unit_columns, columns[j])            unit_number = int(columns[j].split()[1])            if (unit_number > max_unit_number): max_unit_number=unit_number    unit_columns = unit_columns[1:]   # remove dummy first element ('')    # get which units should be kept    keep_units = np.zeros(max_unit_number,dtype='int8')  # which units should be kept    for col in unit_columns:        coursename = dataframe[col].values[0][0:9]  # coursename (first 9 characters)        #print(coursename)        if (not coursename in ignore_list):            #print('*')            unit_number = int(col.split()[1]) # get unit number just in case not in numerical order            keep_units[unit_number-1] = 1    #print(keep_units)        # shift data from unit numbers into new sequence starting from 1    unit_counter = 1  # unit counter    for i in np.arange(max_unit_number):        if (keep_units[i] == 1):            target_unit  = 'Unit ' + str(unit_counter)            current_unit = 'Unit ' + str(i+1)            #print(i, max_unit_number,target_unit, current_unit)            dataframe[target_unit] = dataframe[current_unit]                        unit_counter += 1  # add to unit counter if current unit column used    # Empty the remaining columns that may have (repeated) data    for i in np.arange(max_unit_number-unit_counter+1)+unit_counter:        target_unit = 'Unit ' + str(i)        #print('***',target_unit)        dataframe[target_unit] = ['','']   # Make empty strings             # optionally remove Unnamed columns (put in later - not important for now)    return dataframe# Function to add "_R" to output mark in DataFrame if it is a referred course (and doesn't already have one)def add_R_to_resitmarks(dfthisstudent,referredcore,referredoption):    # extract coursenames and marks for this student    index = dfthisstudent.index    studata=dfthisstudent.loc[index[0]]    stumarks=dfthisstudent.loc[index[1]]    # get list of all referred courses     referredcourses = referredcore.split() + referredoption.split()    # go through each referred course and check the mark, adding "_R" if needed    for coursename in referredcourses:        #print(coursename)        selected=list(dfthisstudent.filter(like="Unit"))        for columnname in selected:            studata = list(dfthisstudent[columnname])            if (studata[0].find(coursename) >= 0 and studata[1].find('_R') < 0):                dfthisstudent[columnname].values[1] = dfthisstudent[columnname].values[1] + '_R'                                        #print(selected)    #print(studata)    #print(stumarks)    #sys.exit(0)    return dfthisstudent# Function to add C codes to compensated marks 30-39def add_C_codes(dfthisstudent,optiononly=False,coreonly=False,corelist=''):    #optiononly=True will only add C to non-core courses (in the corelist)    #coreonly=True will only add C to core lists (in the corelist)    # (if both set, it will not add C codes)        selected=list(dfthisstudent.filter(like="Unit "))    for columnname in selected:        # check to see if core, if so continue        if (optiononly == True):            coursename = dfthisstudent[columnname].values[0][0:9]            if (coursename in corelist): continue    # leave if a core unit        if (coreonly == True):            coursename = dfthisstudent[columnname].values[0][0:9]            if (coursename not in corelist): continue    # leave if a core unit        # also check if 0 credited and therefore no resit possible and therefore compensation irrelevant        coursestr = dfthisstudent[columnname].values[0]        lbindex = coursestr.find('(')        rbindex = coursestr.find(')')        if (lbindex < 0 or rbindex < 0): continue   # no unit so go to next course        thiscredits = int(coursestr[lbindex + 1:rbindex])        if (thiscredits <=0): continue  # if 0 credits, go to next coruse        # get marks if code needs adding        markstr = dfthisstudent[columnname].values[1]        #print(markstr)        if (markstr.find('C') >= 0 or markstr.find('R') >= 0 or markstr.find('X1') >=0): continue  # if contained _C, _R, _X1, _XN_C etc. leave        if (markstr.find('X') >=0): xstr = '_' + markstr[markstr.find('X'):] # Keep any X strings        else: xstr = ''        if (markstr[0:2].isdigit()): mark = int(markstr[0:2])  # should be integers        elif (markstr[0:1].isdigit()): mark = int(markstr[0:1]) # should be integers        else: continue    # not a mark!        # Add _C if needed        #print('Im still inside the add_C function...')        if (mark > 29.95 and mark < 39.95): dfthisstudent[columnname].values[1] = str(mark) + xstr + '_C'        #print(dfthisstudent[columnname].values[1])                return dfthisstudent################################################################# INPUTS################################################################# Switch between BSc (classyear=3) and MPhys (classyear=4)# 1=1st year, 2=2nd year, 31=3rd prog, 32=3rd complete ,4=4th year########classyear=2# 1=physics, 2=MP#########studtype=2# program locationexcelDir='./'# Input and output files# Input filename (excelFilename) can be .csv or .xls/.xlsx - the code will automatically read it in whichever the format (csv is a bit faster though)if(classyear==1):    #excelFilename = './data1819/1styr_27_06_19_edited.csv'    excelFilename = './data1819/1styr_28_06_19_postmcc.csv'    #excelFilename = './data2021/1st year exam grid_10.06.21.csv'        # output filename    if (studtype==1): outfilename = '1styear_Physics.AY2021.prelimfinal.xlsx'   # Physics filename    else: outfilename = '1styear_MathsPhysics.AY2021.prelimfinal.xlsx'   # M+P filename        # if we have carry forward we can compute degree class, so turn this on    deganalysis = 0    # perform borderline checks, yes/no    doingborderline = 0elif (classyear == 2):    #excelFilename = '/data1819/2ndyr_26_06_19.csv'    excelFilename = './data1819/2ndyr_28_06_19_postmcc_edited.csv'    #excelFilename = './data2021/2nd year exam grid_25.06.21.xls'        CFfilename = './data2021/2nd year carry forward.csv'        # output filename    if (studtype==1): outfilename = '2ndyear_Physics.AY2021.prelimfinal.xlsx'   # Physics filename    else: outfilename = '2ndyear_MathsPhysics.AY2021.prelimfinal.xlsx'   # M+P filename    # if we have carry forward we can compute degree class (turn it off to 0 if no CF file available)    deganalysis = 0    # perform borderline checks, yes/no    doingborderline = 0elif(classyear==32):    #excelFilename = '/data1819/3rdyr_18_06_19_external.csv'    excelFilename = './data2021/3rd year exam grid_10.06.21.csv'    #CFfilename = './data18/19/3rdyr_carryforward.csv'    CFfilename = './data2021/3rd year carry forward.csv'    # output filename    if (studtype==1): outfilename = 'FinalYear_BSc_Physics.AY2021.prelimfinal.xlsx'   # Physics filename    else: outfilename = 'FinalYear_BSc_MathsPhysics.AY2021.prelimfinal.xlsx'   # M+P filename        # if we have carry forward we can compute degree class, so turn this on    deganalysis = 1    # perform borderline checks, yes/no    doingborderline = 1elif (classyear == 31):    excelFilename = '/data1819/3rdyr_18_06_19_external.csv'    #excelFilename = './data2021/3rd year exam grid_10.06.21.csv'        CFfilename = './data1819//3rdyr_carryforward.csv'    #CFfilename = './data2021/3rd year carry forward.csv'    # output filename    if (studtype==1): outfilename = '3rdyear_MPhys.AY2021.prelimfinal.xlsx'   # Physics filename    else: outfilename = '3rdyear_MMath.AY2021.prelimfinal.xlsx'   # M+P filename        # if we have carry forward we can compute degree class, so turn this on    deganalysis = 1    # perform borderline checks, yes/no    doingborderline = 0elif(classyear==4):    excelFilename = '/data1819/4thyr_18_06_19_external.csv'    #excelFilename = './data2021/4th year exam grid_10.06.21.csv'        CFfilename='./data1819/4thyr_carryforward.csv'    #CFfilename = './data2021/4th year carry forward.csv'    # output filename    if (studtype==1): outfilename = 'FinalYear_MPhys.AY2021.prelimfinal.xlsx'   # Physics filename    else: outfilename = 'FinalYear_MMath.AY2021.prelimfinal.xlsx'   # M+P filename        # if we have carry forward we can compute degree class, so turn this on    deganalysis = 1    # perform borderline checks, yes/no    doingborderline = 1else:    print('*ERROR: Classyear not defined correctly (should be 1,2,31,32, or4)')    sys.exit(0)    # final filenamefilename=excelDir+excelFilename# Credits requiredcreditstogetMPHYS = 80  creditstogetBScgood=80creditstogetBSclower=60creditstogetMPHYSalgA = 75 # Used for algA creditstogetalgB = 70  # Used for algB# testing only for 2018/19 data! ***REMOVE/COMMENT OUT!!!#creditstogetMPHYS = 80  #creditstogetBScgood=80#creditstogetBSclower=60#creditstogetMPHYSalgA = 80 # Used for algA #creditstogetalgB = 70  # Used for algB# boundaries for degree class (2 d.ps because marks are stored to 1 d.p.)boundaryfirst=69.95boundaryupper2=59.95boundarylower2=49.95boundarythird=39.95# borderlines for promotion consideration (changed for AY2020/2021)borderfirst = 68.borderupper2 = 58.borderlower2 = 48.borderthird = 37.# borderlines for promotion consideration (for 2018/19 testing only). ***REMOVE/COMMENT OUT!!!#borderfirst = 67.#borderupper2 = 57.#borderlower2 = 47.#borderthird = 36.# any students to skipdonotprocess={'10304702','10301241','10341954','9954785','9976148','9914290'}   # IDs should be strings! For 2021 to omit exception students (see Suzanne's email 11-Jun-2021 and Y2 issues xls file) ################################################################# some data definitions################################################################# define core for purpose of triggered resits i.e.  what gets resat if a student is going to have resits anyway.# This one is for studtype=1, for most Physics studentsisphysicscore={'PHYS10071','PHYS10101','PHYS10121','PHYS10191','PHYS10302','PHYS10342','PHYS10352','PHYS10372','PHYS20101','PHYS20141','PHYS20171','PHYS20252','PHYS20312','PHYS20352'}# M+P students have a different list in *addition* to the iscore list above# (only need 2nd year courses because all MATHs courses in Y1 must be passed - these courses add later when they are known)ismathscore={'MATH20401', 'MATH29142'}# Set the core list depending on whether M+P student or notif (studtype == 1): iscore = isphysicscoreelse: iscore = isphysicscore.union(ismathscore)#define what must be passed e.g. lab, BSc dissertation.mustpass={'PHYS10180','PHYS10280',          'PHYS20180','PHYS20280',          'PHYS30180','PHYS30280','PHYS30880',          'PHYS40181','PHYS40182'}# these are where units may have different credits for the marks vs progression (*make sure these are integers, not floats!)credweightunits={'PHYS20040':10,  # main general paper (doesn't count towards progression/resits, but does count towards marks)'PHYS20240':6,            # shorter version worth only 6 (M+P,Phys/Phil, 2nd/3rd year direct entry) 'PHYS20811':5,            # Professional development CD: changed from 9 to 5 in AY2021'PHYS30010':10,           # General paper (doesn't count towards progression/resits, but does count towards marks)'PHYS30210':6,           # General paper (short version for M+P, Phys/Phil, 2nd/3rd year direct entry)'PHYS30811':3}             # Added back for those few students re-sitting#'PHYS20030':0,            # Peer-Assisted Study Sessions (PASS) - no marks, no credits, but here just in case #'ULGE21030':0,            # #'ULFR21030':0,#'ULJA21020':0,#'ULRU11010':0,#'MATH35012':0,#'COMP39112':0,#'MATH49102':0}noresitlist={}  # any units that can't be resit (other than 0 credit units (which are not resitable) like lab etc.)# courses to completley ignore because they don't have a mark e.g. tutorials, PASS etc. ignore_courses={'MPHYS',         # not a course                'MPHYSON',       # not a course                'PHYS10000',    # tutorials/similar                'PHYS20000',    # tutorials/similar                'PHYS30000',    # tutorials/similar                'PHYS40000',    # tutorials/similar                'PHYS10010',                'PHYS10020',                'PHYS10030',                'PHYS10022',                'PHYS11000',                'PHYS21000',                'PHYS31000',                'PHYS41000',                'PHYS20030',                'PHYS19990',    # PASS Peer=Assissted Self-Study                'PHYS29990',    # PASS Peer=Assissted Self-Study                'PHYS39990',     # PASS Peer=Assissted Self-Study                'MATH S100',    # Maths Study module (0 credited) [last 0 omitted on prurpose because of extra gap]                'MATH S200',    # Maths Study module (0 credited) [last 0 omitted on prurpose because of extra gap]                'MATH S300',    # Maths Study module (0 credited) [last 0 omitted on prurpose because of extra gap]                'MATH S400',    # Maths Study module (0 credited) [last 0 omitted on prurpose because of extra gap]                'MATH    S'     # sometimes this format}                # BELOW IS JUST FOR TESTING WITH 2018/19 DATA!! ***REMOVE/COMMENT OUT!!!credweightunits={'PHYS20040':10,'PHYS20240':6,  #6  'PHYS20811':9,  #9'PHYS20821':5,'PHYS30010':10,'PHYS30210':6,'PHYS30811':3,'PHYS20030':0,'ULGE21030':0,'ULFR21030':0,'ULJA21020':0,'ULRU11010':0,'MATH35012':0,'COMP39112':0,'MATH49102':0}    ################################################################################################################################################################################################# the key function. Reads the grid and returns analysis of the target student.def analysisstudentfinalyear(filename,targetstudent):    #print("Analysing new student",targetstudent)    # read data with row 4 (starting from 0) as hesders to get right data    try:        if (filename.split('.')[-1] == 'csv'): df=pd.read_csv(filename,skiprows= lambda x: +rowskiplogiccourse(x),dtype='str',encoding = "ISO-8859-1")        else: df=pd.read_excel(filename,skiprows=lambda x: +rowskiplogiccourse(x),dtype='str')    except:        print('\nERROR reading main input file. Please check filename and/or directory...\n')        sys.exit(0)            #df = df.loc[:, ~df.columns.str.contains('^Unnamed')] # do not do this as there are extra columns for X, XL codes etc.        # remove bad characters    df = df.replace(np.nan, '', regex=True)    # useful : df.loc[(df[‘Color’] == ‘Green’) & (df[‘Shape’] == ‘Rectangle’)]    # select row with studentID= target    selected=df.loc[df['Emplid'] == targetstudent]    #print(selected)        # get index number of this ropw    selectedindex=selected.index    #print(targetstudent,selectedindex)    #print('target student',targetstudent)    # extract course names (top row of target student in grid)    studata=(df.iloc[selectedindex])    studata=studata.iloc[0]        # extract course marks (bottom row of target student in grid)    stumarks=(df.iloc[selectedindex+1])    stumarks=stumarks.iloc[0]        #print(studata)    #print(stumarks)    #if (studata[0] == '10074812'):    #    print('stopping')    #    sys.exit(0)        progtaken=studata[4]        # get prog         #print("setting prog taken",progtaken)    # Create header list and data frame from file    headers=list(df.columns.values)    #print(headers)    dfheaders = pd.DataFrame(columns=headers)        # define a lot of variables for a given student. We return most of these    markspresent=0    creditstaken=0    creditspassed=0    creditspassedlab=0    creditsov30=0        mean=0    meancredsum=0    creditsformeansum=0    credsatfirst=0    credsatupper2 = 0    credsatlower2 = 0# resit variables    someunitunder30=0    referredcore=''    referredoption = ''    deferredcore = ''    deferredoption=''    deferredcredits=0    credittarget=120    creditsexcluded=0    honours=0    degclass=-1    faillabprog=0    projectmark=-1    project1mark=-1  # project mark for S1    project1cred=-1  # credit for project S1    project2mark=-1  # project mark for S2    project2cred=-1  # credit for project S2    mathunit=0        included=[]    coursesincludedcompletestring=''    excluded=''    mathscreditstaken = 0    mathscreditsmeansum = 0    mathscreditspassed=0    # maths sums. only relevant for maths/phys students (0=physics, 1=maths/physics student)    # also determine corelist    if('Math' in progtaken):        mathsphys=1    else:        mathsphys=0            stuname =studata[1]    #print("Name ",stuname)    # loop over student courses    for i in range(studata.size):        #print(studata[0],studata[i], stumarks[i])        # spot a valid course. (An upgrade would do this automatically)        if( ('PHYS' in studata[i] or'EART'in studata[i] or 'HSTM'in studata[i]  or 'UCOL'in studata[i] or 'MATH'in studata[i]            or 'BIOL'in studata[i] or 'PHIL'in studata[i] or 'UCIL'in studata[i] or 'ECON' in studata[i]             or 'COMP' in studata[i] or 'BMAN' in studata[i] or 'HSTM' in studata[i] or 'MCEL' in studata[i] or 'MACE' in studata[i]            or 'ULBS' in studata[i] or 'ULCH' in studata[i] or 'ULIT' in studata[i] or 'ULPT' in studata[i]            or 'ULGE' in studata[i] or 'ULFR' in studata[i] or 'ULJA' in studata[i] or 'ULSP' in studata[i]            or   'ULAR' in studata[i] or 'ULBS' in studata[i] or 'ULCH' in studata[i] or 'ULDU' in studata[i] or 'ULFR' in studata[i]            or 'ULGE' in studata[i] or 'ULHB' in studata[i] or 'ULIT' in studata[i] or 'ULKR' in studata[i] or 'ULJA' in studata[i]            or 'ULPE' in studata[i] or 'ULPT' in studata[i] or 'ULRU' in studata[i] or 'ULSP' in studata[i] or 'ULTU' in studata[i]            or 'ULUR' in studata[i] or 'MUSC' in studata[i])            ):                        # get course name            coursename = studata[i][0:9]            # reject/ignore units that don't actually represent a mark e.g. if random string (eg. MPHYS, tutorials, PASS etc.)            # also remove these columns from the data frame to save unncessary output later (has to be done outside of this loop)            # ***IF DONE BEFORE THIS LOOP WITH STUDATA/STUMARKS, WE DON'T NEED THE LINE BELOW (upgrade later)            if(coursename.strip() in ignore_courses): continue            #print('found course:',coursename)            #print(stumarks)                        # reset variables.            # exclude is MC exclusion.            excludethiscourse = 0            mainmarkfound = 0            profoundinsub=0            markcomponentsfound=0            mathunit = 0            thiscredit=0            deferthiscourse=0                        # if a mark ends R or R in 2nd column, put R back            if('R' in stumarks[i] or 'R' in stumarks[i+1] ):                #print("Found R mark")                #stumarks[i]=stumarks[i][:2]                 #print(stumarks[i])                stumarks[i] = stumarks[i][:2] + 'R'            # if a mark end in C or C in 2nd column            if ('C' in stumarks[i] or 'C' in stumarks[i+1]):                #print("Found compensated mark ", stumarks[i])                #stumarks[i] = stumarks[i][:2]                #print(stumarks[i])                stumarks[i] = stumarks[i][:2] + 'C'            # If "PRO", just ignore for now to stop program crashing but should be put into donotprocess list            if (stumarks[i] == 'PRO'):                print('*WARNING: PRO mark ignored: should put into donotprocess list!' + coursename + ' ' + anid + ' ' + stuname)                continue                            # If no mark, ignore, and just continue to next one            if (stumarks[i] == ''):                print("*WARNING: no mark "+ coursename + ' ' + anid + ' ' + stuname)                continue            # get numerical mark (removing _R or _C if exists)            if (stumarks[i].isdigit()): thismark = float(stumarks[i])            else: thismark = float(stumarks[i][0:stumarks[i].find('_')])            #thismark = float(stumarks[i])            #print('main mark found', thismark)                        # get credits            # must be a straightforward mark or a progression            # dig out credits taken            lbindex = studata[i].find('(')            rbindex = studata[i].find(')')            # print(lbindex, rbindex)            # print(studata[i][lbindex+1:rbindex])            thiscredits = int(studata[i][lbindex + 1:rbindex])  # should be integer            #print('using main mark credits ',thiscredits)            #print(targetstudent,studata[i][0:9],stumarks[i],stumarks[i+1],thiscredits)            # credits for this course            creditsformean = thiscredits            #print('creditsformean ',creditsformean)            # if zero credits, may need credits for credit weighted mean            if (creditsformean == 0):                 try:                    creditsformean = credweightunits[coursename]                except: print('*WARNING: I do not know the credit weight for the mean of ', coursename)                                print('Mark = ',thismark, ' with ', creditsformean, ' credits for ',coursename)            # panic if credits not known!            if (creditsformean == 0):                print('*WARNING: I do not know the credit weight for the mean of ', coursename)            # include credits for vacation essay if S2 exams excluded            # give vacation essay credits as real credits if giverealcredits=1            #if (coursename == "PHYS30811"):            #    thiscredits = creditsformean            #    studata[i] = 'PHYS30811 (3)'            #if (coursename == "PHYS20821"):            #    thiscredits = creditsformean            #    studata[i] = 'PHYS20821 (5)'                        ######## exclusions (see Suzanne's email of 9-Jun-2021)            # Exlcude mark from year mark            if (stumarks[i + 1] == 'X'):                #print("exclude!")                excludethiscourse = 1                creditsexcluded+=creditsformean                excluded = excluded + coursename + ' / '                stumarks[i]=stumarks[i] + '_X'   # decide later if compensated or not (if <30, should be X1 anyway)                             # Absent from exam with reason: excludes from the calculation of the year mark and flags as a resit at 1st attempt (deferred)            if (stumarks[i + 1] == 'XL'):                  #print("missed with a reason. exclude!")                excludethiscourse = 1                creditsexcluded += creditsformean                excluded = excluded + coursename + ' / '                stumarks[i] = stumarks[i] + '_XL'                  if (classyear == 1 or classyear == 2):  # deferred if Y1/Y2 only                    stumarks[i] = stumarks[i] + '_D'                    deferthiscourse = 1                        # deferral - resit in years 1 and 2 (same as XL)            if (stumarks[i + 1] == 'X1'):                #print("deferred",coursename)                excludethiscourse = 1                creditsexcluded += creditsformean                excluded = excluded + coursename + ' / '                stumarks[i] = stumarks[i] + '_X1_D'                deferthiscourse = 1                            if (stumarks[i + 1] == 'XN'):                #print("missed with no reason. NOT exclude!")                excludethiscourse = 0                if (classyear ==1 or classyear == 2): # resits/compensation only for Y1/2                    if (float(stumarks[i]) >= 29.95 and float(stumarks[i]) < 39.95): stumarks[i] = stumarks[i] + '_XN_C'   # compensate                    elif (float(stumarks[i])  >= 39.95): stumarks[i] = stumarks[i] + '_XN'     # this should never happen                else:                    stumarks[i] = stumarks[i] + '_XN'  # No need to add _R as this will happen later (and Y3/4 just use the mark (no resits/comp)            #####################                        # if a maths course for recording M+P separately (for M+P students)            if ('MATH' in studata[i]):  mathunit = 1                        # log the credits taken by the student, first for physics, then maths (if maths/phys)            creditstaken += thiscredits                        if (mathunit == 1):                mathscreditstaken += thiscredits                #print("maths credits added ", mathscreditstaken, thiscredits)                            if (not excludethiscourse): creditsformeansum += creditsformean            markspresent+=1            # update meancredsum (used for mean)            if(not excludethiscourse):                meancredsum+=thismark*creditsformean                               if(mathunit==1):                    #print('######', thismark, creditsformean)                    mathscreditsmeansum+=thismark*creditsformean                                # log credits above 40% and 30%            if thismark >= 39.95:                creditspassed += thiscredits                #print("Credits passed ",coursename,thiscredits,creditspassed)                if(coursename in mustpass):                    creditspassedlab+=thiscredits                if(mathunit):                    #print('logging maths credits passed',coursename,thismark,thiscredits)                    mathscreditspassed+=thiscredits            if thismark > 29.95: creditsov30 += thiscredits                            # has this course been failed when it must be passed i.e. lab,  project?            if (coursename in mustpass and thismark<40): faillabprog = 1            # if any course is < 30%, resits triggered for 1st/2nd year (also trigger resits in main program once have all unit data            if(thismark<29.95 and not coursename in noresitlist and thiscredits>0 and excludethiscourse==0): someunitunder30=1            # in case resits get triggered, log what would be referred.            if(thismark<39.95 and coursename in iscore and thiscredits>0 and not coursename in noresitlist and stumarks[i+1] != '_X_C'):                if (not deferthiscourse):                    referredcore = referredcore + coursename + ' / '                else:                    deferredcore = deferredcore + coursename + '[1] / '  # [1] added to show first time (Judith email 17-Jun-2021)                    deferredcredits += thiscredits   # tally deferred credits                        if (thismark < 29.95 and coursename not in iscore and thiscredits>0 and not coursename in noresitlist and stumarks[i+1] != '_X_C'):                if (not deferthiscourse):                    referredoption = referredoption + coursename + ' / '                else:                    deferredoption = deferredoption + coursename + '[1] / '  # [1] added to show first time (Judith email 17-Jun-2021)                    deferredcredits += thiscredits     # tally deferred credits                                # Additional requirement for M+P year 1 students to pass all MATHs units otherwise need to resit            if (thismark<39.95 and classyear==1 and mathunit and mathsphys):                if(not coursename in noresitlist):                    if (not deferthiscourse):                        if (not coursename in referredcore):  # so not to duplicate if set above                             referredcore = referredcore + coursename + ' / '                        else:                            deferredcore = deferredcore + coursename + '[1] / '                              deferredcredits += thiscredits     # tally deferred credits                                                    # get project mark for the grid display and for future calls (e.g. algB).            # taking into account special cases for non-standard projects (Phys/Phil and M+P)            # or with only 1 project            if coursename == 'PHYS30880':                projectmark=thismark   # BSc dissertation                #print('Project mark is ',thismark)                            if (coursename=='PHYS40181' and project1mark == -1):                project1mark=thismark  # S1                project1cred=thiscredits            elif (coursename=='PHYS40181' and project1mark >= 0):                project2mark=thismark # in case S1 is a different module (see below)                project2cred=thiscredits                            if (coursename=='PHYS40182' and project2mark == -1):                project2mark=thismark  # S2                project2cred=thiscredits            elif (coursename=='PHYS40182' and project2mark >= 0):                project1mark=thismark  # in case S2 is a different module (see below)                project1cred=thismark                              # for Phys/Phil who do an essay for one project - only worth 10 credits c.f. 20 credits for physics            if (coursename=='PHIL40000' and project1mark==-1):                project1mark=thismark                project1cred=thiscredits            elif (coursename=='PHIL40000' and project2mark==-1):                project2mark=thismark                project2cred=thiscredits                            # for Maths/Phys Maths projects only 15 credits c.f. 20 credits for physics            if (coursename=='MATH40011' and project1mark==-1):                project1mark=thismark                project1cred=thiscredits            if (coursename=='MATH40022' and project2mark==-1):                project2mark=thismark                project2cred=thiscredits                            # log credits at boundaries - used for promotion (A/B) and must include creds above each grade            if thismark > 69.95:                credsatfirst+=thiscredits            if thismark > 59.95:                credsatupper2 += thiscredits            if thismark > 49.95:                credsatlower2 += thiscredits    # combine S1/S2 project marks after all courses when they are set    if (projectmark==-1 and project1mark >= 0 and project2mark >= 0): projectmark = ((project1mark*project1cred)+(project2mark*project2cred))/float(project1cred+project2cred)    elif (projectmark==-1 and project1mark >= 0 and project2mark < 0): projectmark = project1mark  # if only 1 project mark    elif (projectmark==-1 and project1mark < 0 and project2mark >= 0): projectmark = project2mark  # if only 1 project mark            # compute mean credit sum    if(creditsformeansum>0):        meancredsum=float(meancredsum)/creditsformeansum        print('Mean mark calc:',stuname, meancredsum,creditsformeansum,creditstaken)    else:        meancredsum=0    if(mathscreditstaken>0):        mathscreditsmeansum=float(mathscreditsmeansum)/mathscreditstaken        #print('maths mark calc:',mathscreditsmeansum,mathscreditstaken)    else:        mathscreditsmeansum=0    # log student units/marks to data frame if course not ignored    dfheaders= dfheaders.append(studata)    dfheaders = dfheaders.append(stumarks)    # log data we have made in new columns in data frame    dfheaders['Credits Taken']=creditstaken    dfheaders['Credits Passed'] = creditspassed    dfheaders['Maths Credits Taken'] = mathscreditstaken    dfheaders['Maths Credits Passed'] = mathscreditspassed    dfheaders['Project Mark']= round(projectmark+0.0000001,1)  # to 1.d.p.    dfheaders['Credits Excluded'] = creditsexcluded    dfheaders['Courses Included']= coursesincludedcompletestring    dfheaders['Courses Excluded'] = excluded    #print('@@@@@@@@@@@@@@', meancredsum, creditsformeansum)    #print(dfheaders[0:1].values)        #print('end of student routine')    return progtaken,mathsphys,meancredsum,mathscreditsmeansum,creditsformeansum,creditstaken,mathscreditstaken,creditspassed, mathscreditspassed,creditspassedlab,faillabprog, projectmark, excluded, creditsexcluded,credsatfirst, credsatupper2, credsatlower2, someunitunder30, referredcore,referredoption,deferredcore,deferredoption,deferredcredits,dfheaders################################## extracts carry forward for target studendef getCF3rdYear(filename,targetstudent):    yearmark3=-1. # for 4th year maths/phys students    # get CF marks    #print("doing CF",targetstudent, filename)    try:        if (filename.split('.')[-1] == 'csv'): df = pd.read_csv(filename, skiprows=lambda x: +rowskiplogic(x), dtype='str', engine='python')        else: df = pd.read_excel(filename, skiprows=lambda x: +rowskiplogic(x), dtype='str')    except:        print('\nERROR reading Carry Forward file. Please check filename and/or directory...\n')        sys.exit(0)    df = df.replace(np.nan, '', regex=True)    #print(df.head(20))    #print('target student=',targetstudent)    selected = df.loc[df['Emplid'] == targetstudent]    #print("selected data")    #print(selected)    # Check if empty - if so, stop and give warning - usually, CF file not correct or not used (deganalysis should be 0)    #print(selected.empty)    if (selected.empty):        print('*WARNING: Cannot find this student in CF file [incorrect/missing file or you do not need the CF file (put deganalysis=0)')        sys.exit(0)        headers = list(df.columns.values)    dfheaders = pd.DataFrame(columns=headers)    #print(headers)    # get index number of this ropw    selectedindex = selected.index    #print("reached here")    #print(selected.index)    data=(df.iloc[selectedindex])    #print("printing data")    #print(data)        data=data.iloc[0]    #print(data[3])        nofirstyear=0    #print(data[3])    if data[3]=='n/a' or data[3]=='':        data[3]='-1'    if data[4] == 'n/a' or data[4]=='':        data[4] ='-1'    if data[5] == 'n/a' or data[5] == '':        data[5] = '-1'    if data[6]=='n/a' or data[6]=='':        data[6]='-1'    if data[7] == 'n/a' or data[7]=='':        data[7] ='-1'    if data[8] == 'n/a' or data[8] == '':        data[8] = '-1'            #print(data[3],data[4])    #print('HERE')    phys1=float(data[3])    phys2=float(data[4])    phys3 = float(data[5])    maths1=float(data[6])    maths2=float(data[7])    maths3 = float(data[8])    # get Year 3 mark for 4th year M+P students    if (classyear == 4 and studtype == 2):        if (np.size(data) < 10):            print('Using straight Phys/Maths average because year3mark does not seem to appear in CF file')            yearmark3 = (phys3+maths3)/2 # incorrect - not a straight average (in case no year3 mark available)        elif (data[9] == 'n/a' or not data[9]):            print('Using straight Phys/Maths average because year3mark does not seem to appear in CF file')            yearmark3 = (phys3+maths3)/2 # incorrect - not a straight average (in case no year3 mark available)        else:            yearmark3=float(data[9])             #print('CF : ',phys1,phys2,phys3,maths1,maths2,maths3,yearmark3)    return phys1,phys2,phys3,maths1,maths2,maths3,yearmark3################################# combine year marks to overall mark.def getoverallmark(maths1,maths2,maths3,yearmark3,phys1, phys2,phys3,finalyearmark,finalyearmathsmark,finalyearphysicsmark,classyear,progtaken,deganalysis,force3yr):    overallmark=-1.    overallmathsmark=-1.    overallphysicsmark=-1.    # BSc    if( ( ('BSc' in progtaken) or force3yr==1) and not('Math' in progtaken)):        if (deganalysis==0): phys1 = phys2 = -1  # in case no CF file available to stop code crashing (E.g. for 2nd year)                if(phys1<0 and phys2>0): overallmark=0.333*phys2+0.666*finalyearmark # no first year mark, so direct entry        elif(phys1<0 and phys2<0): overallmark = finalyearmark  # no first or second year mark, so direct entry (also 1st year)        elif(phys1>0 and phys2<0): overallmark = 0.25*phys1 + 0.75*finalyearmark  # for 2nd years when CF file available (deganalysis==1)        else: overallmark= 0.1*phys1+0.3*phys2+0.6*finalyearmark        overallphysicsmark = overallmark            # BSc M/P    if( ( ('BSc' in progtaken) or force3yr==1) and 'Math' in progtaken):        if (deganalysis==0):  # in case no CF file available to stop code crashing (E.g. for 2nd year)            phys1 = phys2 = maths1 = maths2 = -1                if (phys1<0 and phys2>0): # no first year mark, so direct entry            overallmark=0.333*(phys2+maths2)/2.+0.666*finalyearmark             overallphysicsmark = 0.333 * phys2 + 0.666 * finalyearphysicsmark             overallmathssmark = 0.333 * maths2 + 0.666 * finalyearmathsmark          elif (phys1>0 and phys2<0): # 2nd year students when CF file available (deganalysis==1)            overallmark = 0.25*(phys1+maths1)/2. + 0.75*finalyearmark            overallphysicsmark = 0.25*phys1 + 0.75*finalyearphysicsmark            overallmathsmark = 0.25*(maths1) + 0.75*finalyearmathsmark        else:            overallmark= 0.1*(phys1+maths1)/2.+0.3*(phys2+maths2)/2.+0.6*finalyearmark            overallphysicsmark = 0.1 * (phys1) + 0.3 * (phys2) + 0.6 * finalyearphysicsmark            overallmathsmark = 0.1 * (maths1) + 0.3 * (maths2) + 0.6 * finalyearmathsmark                     #print("computed BSc Maths overall mark ",phys1,phys2,finalyearphysicsmark,finalyearmathsmark,maths1,maths2,finalyearmark,overallphysicsmark,overallmathsmark,overallmark)         #if(phys1<0 and phys2<0): overallmark = finalyearmark  # no first or second year mark, so direct entry. This should not happen             #  MPHYS    if ('MPhys' in progtaken and not('Math' in progtaken) and not force3yr):        #print('MPHYS, not Maths')        if (deganalysis==0): phys1 = phys2 = phys3 = -1  # in case no CF file available to stop code crashing (E.g. for 2nd year)                    if (phys1 < 0 and phys2 > 0): overallmark = 0.2*phys2+ 0.4*phys3 + 0.4*finalyearmark  # no first  year mark, so direct entry        elif (phys1 < 0 and phys2 < 0): overallmark = 0.5*phys3 + 0.5*finalyearmark  # no first or second year mark, so direct entry        elif (phys1>0 and phys2<0): overallmark = (0.06/0.25)*phys1 + (0.19/0.25)*finalyearmark   # 2nd year when CF file available (deganalysis==1)        elif (phys1>0 and phys2>0 and phys3<0): overallmark = (0.06/0.625)*phys1 + (0.19/0.625)*phys2 + (0.375/0.625)*finalyearmark # 3rd year progressing        else: overallmark = 0.06 * phys1 + 0.19 * phys2 + 0.375 * phys3 + 0.375*finalyearmark             overallphysicsmark = overallmark            # MPHYS study in    if ( ('MPhys' in progtaken and not('Math' in progtaken) and 'Study' in progtaken)  and not force3yr):        #print('MPHYS, study in')        if (deganalysis==0):  # in case no CF file available to stop code crashing (E.g. for 2nd year)            phys1 = phys2 = phys3 = -1                if (phys1>0 and phys2<0): overallmark = (0.08/0.31)*phys1 + (0.23/0.31)*finalyearmark   # 2nd year when CF file available (deganalysis==1)        elif (phys1>0 and phys2>0 and phys3<0): overallmark = (0.08/0.54)*phys1 + (0.23/0.54)*phys2 + (0.23/0.54)*finalyearmark   # 3rd year        else: overallmark = 0.08 * phys1 + 0.23 * phys2 + 0.23 * phys3 + 0.46*finalyearmark     # 4th year    # Phys Europe 4th year - requires [3A] to be added to the program code to differentiate them.    if ('3A' in progtaken and not force3yr):        #print("making a 3A deg calc")        overallmark = 0.08 * phys1 + 0.23 * phys2 + 0.23 * phys3 + 0.46 * finalyearmark    # MPHYS M/P.    if ('Phys' in progtaken and 'Math' in progtaken and not force3yr and not ('BSc' in progtaken)):        #print('MPHYS,  Maths')        if (deganalysis==0):  # in case no CF file available to stop code crashing (E.g. for 2nd year)            phys1 = phys2 = yearmark3 = maths1 = maths2 = maths3 = -1                if (phys1 < 0 and phys2 > 0): # no first  year mark, so direct entry            overallmark = 0.2*(phys2+maths2)/2.+ 0.4*yearmark3 + 0.4*finalyearmark              overallmathsmark = 0.2*maths2 + 0.4*maths3 + 0.4*finalyearmathsmark              overallphysicsmark = 0.2*phys2+ 0.4*phys3 + 0.4*finalyearphysicsmark          elif (phys1 < 0 and phys2 < 0): # no first or second year mark, so direct entry            overallmark = 0.5*yearmark3 + 0.5*finalyearmark              overallphysicsmark = 0.5*phys3 + 0.5*finalyearphysicsmark              overallmathsmark = 0.5*maths3 + 0.5*finalyearmathsmark          elif (phys1>0 and phys2<0):  # 2nd years when CF file available (deganalysis==1)            #overallmark = 0.06/0.25 * (phys1+maths1)/2. + 0.19/0.25*(finalyearmathsmark+finalyearphysicsmark)/2.            overallmark = 0.06/0.25 * (phys1+maths1)/2. + 0.19/0.25*finalyearmark            overallmathsmark =  0.06/0.25 * maths1 + 0.19/0.25 * finalyearmathsmark            overallphysicsmark = 0.06/0.25 * phys1 + 0.19/0.25 * finalyearphysicsmark        elif (phys1>0 and phys2>0 and phys3<0): # 3rd years            overallmark = (0.06/0.625)*(phys1+maths1)/2. + (0.19/0.625)*(phys2+maths2)/2. + (0.375/0.625)*finalyearmark            overallmathsmark =  (0.06/0.625)*maths1 + (0.19/0.625)*maths2 + (0.375/0.625)*finalyearmathsmark            overallphysicsmark = (0.06/0.625)*phys1 + (0.19/0.625)*phys2 + (0.375/0.625)*finalyearphysicsmark        else: # 4th years            overallmark = 0.06 * (phys1+maths1)/2. + 0.19 * (phys2+maths2)/2. + 0.375 * yearmark3 + 0.375*finalyearmark            overallmathsmark =  0.06 * maths1 + 0.19 * maths2 + 0.375 * maths3 + 0.375*finalyearmathsmark            overallphysicsmark = 0.06 * phys1 + 0.19 * phys2 + 0.375 * phys3 + 0.375*finalyearphysicsmark            #print('returning OM,OMM,OPM',overallmark, overallmathsmark, overallphysicsmark, progtaken)    return overallmark, overallmathsmark, overallphysicsmark################################# figures out overall degree class based on overall mark and credits passeddef getMPhysDegClass(overallmark, creditspassed):    # first    if  creditspassed>=creditstogetMPHYS and overallmark>=boundaryfirst:        honours=1        degclass=4    # 2:1    elif creditspassed>=creditstogetMPHYS and overallmark>=boundaryupper2 and overallmark<boundaryfirst:        honours = 1        degclass = 3    # 2:2    elif creditspassed>=creditstogetMPHYS and  overallmark>=boundarylower2 and overallmark<boundaryupper2:        honours = 1        degclass = 2    # no thirds in MPHYS    # fail    else:        honours=0        degclass=-1    #eligible for BSc on marks in first three years, return -1 in degclass to note this    return honours, degclass################### BSc class (a touch more complex than MPHYS class)def getBScDegClass(overallmark, creditspassed):    if  creditspassed>=creditstogetBScgood and overallmark>=boundaryfirst:        honours=1        degclass=4    elif creditspassed >= creditstogetBSclower and creditspassed <=creditstogetBScgood and overallmark >= boundaryfirst:        honours = 1        degclass = 3    elif creditspassed>=creditstogetBScgood and overallmark>=boundaryupper2 and overallmark<boundaryfirst:        honours = 1        degclass = 3    elif creditspassed>=creditstogetBSclower and creditspassed <=creditstogetBScgood and overallmark>=boundaryupper2 and overallmark<boundaryfirst:        honours = 1        degclass = 2    elif creditspassed>=creditstogetBScgood and  overallmark>=boundarylower2 and overallmark<boundaryupper2:        honours = 1        degclass = 2    elif creditspassed>=creditstogetBSclower and  creditspassed<creditstogetBScgood and overallmark>=boundarylower2 and overallmark<boundaryupper2:        honours = 1        degclass = 1    elif creditspassed >= creditstogetBSclower and overallmark >= boundarythird:        honours = 1        degclass = 1    elif creditspassed >= creditstogetBSclower:        honours =0        degclass=0    else:        honours=0        degclass=-1    return honours, degclass################### promote by Alg A? 1 or 0 (A = Stage 1 - by mark distribution - see section 12.5 of UG handbook)def algorithmA(progtaken,degclass,credsatfirst,credsatupper2,credsatlower2):    promote=0        if('BSc' in progtaken):        if(degclass==3 and credsatfirst>=creditstogetBScgood):            promote=1        if(degclass==2 and credsatupper2>=creditstogetBScgood):            promote=1        if(degclass==1 and credsatlower2>=creditstogetBScgood):            promote=1    else:        if (degclass == 3 and credsatfirst >= creditstogetMPHYSalgA):            promote = 1        if (degclass == 2 and credsatupper2 >= creditstogetMPHYSalgA):            promote = 1        if (degclass == 1 and credsatlower2 >= creditstogetMPHYSalgA):            promote = 1                #print("alg A ",promote,degclass,credsatfirst,credsatupper2,credsatlower2,creditstogetBScgood,creditstogetMPHYS)    return promote################### promote by alg B. yes/no (B = Stage 2  - criteria-based classification review - see section 12.5 of UG handbook)def algorithmB(progtaken,degclass,credsatfirst,credsatupper2,credsatlower2,finalyearmark,overallmark,projectmark):    promote=0    if('BSc' in progtaken):        if(degclass==3 and credsatfirst >= creditstogetalgB and projectmark>=boundaryfirst and finalyearmark>overallmark):            promote=1        if(degclass==2 and credsatupper2 >= creditstogetalgB and projectmark>=boundaryupper2 and finalyearmark>overallmark):            promote=1        if(degclass==1 and credsatlower2 >= creditstogetalgB and projectmark>=boundarylower2 and finalyearmark>overallmark):            promote=1    else:        if (degclass == 3 and credsatfirst >= creditstogetalgB and projectmark >=boundaryfirst and finalyearmark > overallmark):            promote = 1        if (degclass == 2 and credsatupper2 >= creditstogetalgB and projectmark >=boundaryupper2 and finalyearmark > overallmark):            promote = 1        if (degclass == 1 and credsatlower2 >= creditstogetalgB and projectmark >=boundarylower2 and finalyearmark > overallmark):            promote = 1    return promote############################################################################################################################################################################################# NOW THE RUNNING PART OF THE CODE############################################################################################################################################################################################# open file and clean filetry:    if (filename.split('.')[-1] == 'csv'): df = pd.read_csv(filename, skiprows=lambda x: +rowskiplogic(x), dtype='str',encoding = "ISO-8859-1")    else: df=pd.read_excel(filename,skiprows=lambda x: +rowskiplogiccourse(x),dtype='str')except:    print('\nERROR reading the main input file. Please check filename and/or directory...\n')    sys.exit(0)    df = df.loc[:, ~df.columns.str.contains('^Unnamed')]   df = df.replace(np.nan, '', regex=True)# Get all# select just IDs easily without a loop#sidsname=list(df.columns)[0]# get IDs. select column of IDs and then every other one using ::2#sids=(df.loc[:,sidsname])[::2]if(classyear==1):    #print('taking all students in year 1')    #df=df[(df['Plan'].str.contains('MPhys')) | (df['Plan'].str.contains('BSc'))]    #df=df[(df['Plan'].str.contains('MPhys')) & (~df['Plan'].str.contains('Math'))]    # take all    #df = df[(df['Plan'].str.contains('MPhys')) | (df['Plan'].str.contains('BSc')) | (df['Plan'].str.contains('Math'))]    if (studtype == 1):        df = df[(df['Plan'].str.contains('MPhys')) | (df['Plan'].str.contains('BSc')) & (~df['Plan'].str.contains('Math'))]    else:        df = df[(df['Plan'].str.contains('Math'))]if(classyear==2):    if (studtype == 1):        df = df[(df['Plan'].str.contains('MPhys')) | (df['Plan'].str.contains('BSc')) & (~df['Plan'].str.contains('Math'))]    else:        df = df[(df['Plan'].str.contains('Math'))]if(classyear==31):# df=df[(df['Plan'].str.contains('MPhys')) | (df['Plan'].str.contains('Math'))]    if (studtype == 1):        df = df[(df['Plan'].str.contains('MPhys'))]    else:        df = df[(df['Plan'].str.contains('MMath'))]#  Select BScs without mathsif(classyear==32):    if(studtype==1):        df = df[(df['Plan'].str.contains('BSc')) & (df['Plan'].str.contains('Physics'))]    else:        df = df[(df['Plan'].str.contains('BSc')) & (df['Plan'].str.contains('Math'))]# Select MPHYS no mathsif(classyear==4):    #print ('analysing year 4')    if (studtype == 1):        df = df[(df['Plan'].str.contains('MPhys'))]    else:        df = df[(df['Plan'].str.contains('MMath'))]sidsname=list(df.columns)[0]sids=(df.loc[:,sidsname])#print(df)cohortmean=0cohortcount=0cohortcreditpassedmean=0cohortcredittakenmean=0numberfirsts=0numberupper2=0numberlower2=0numberthird=0numberordinary=0numberfail=0numberborderline=0numberPApromote=0numberPBpromote=0degclasschange=0degclasschangeup=0degclasschangedown=0degclass=-1# overall dataframe of all students.try:    if (filename.split('.')[-1] == 'csv'): dftemp=pd.read_csv(filename,skiprows= lambda x: +rowskiplogic(x),dtype='str',encoding = "ISO-8859-1")    else: dftemp=pd.read_excel(filename,skiprows=lambda x: +rowskiplogiccourse(x),dtype='str')except:    print('\nError reading main input file. Please check filename and/or directory...\n')    sys.exit(0)    dftemp = df.loc[:, ~df.columns.str.contains('^Unnamed')]dftemp = dftemp.replace(np.nan, '', regex=True)headers=list(dftemp.columns.values)newheaders=[]for s in headers:    if(not 'Unnamed' in s):        newheaders.append(s)dfallstudents= pd.DataFrame(columns=newheaders)#print('IDs read')#print(sids)# loop over IDscounter = 0for anid in sids:        #print('**************')    counter += 1    print('Processing student ID {0:s} ({1:d}/{2:d})'.format(anid,counter,sids.size))# veto some students    #print('***', anid)    if (anid in donotprocess):        selected=df.loc[df['Emplid'] == anid]        selectedindex=selected.index        print('*Ignoring ', anid, selected["Name"].values[0])         continue# -2 means not set. -1 is a fail.    degclass=-2    # needed for progression    fail=0    progress=0    resitstriggered=0    status = 'ACTV' # status string for output grid (default is 'ACTV' unless reason not to progress)        # fail is failed on credits    # faillabprof means failed lab or project    # get carry forward    if(deganalysis or classyear==31):        #print("getting carryforward")        phys1, phys2, phys3,maths1,maths2,maths3,yearmark3  = getCF3rdYear(excelDir+CFfilename, anid)        #print(phys1,phys2,phys3,maths1,maths2,maths3)    # get all final year data for the student    #print('calling stud ana for ',anid)    progtaken, mathsphys,finalyearmark, finalyearmathsmark,creditsformeansum,creditstaken,mathscreditstaken,creditspassed,mathscreditspassed,creditspassedlab, \    faillabprog, projectmark,excluded, creditsexcluded,credsatfirst, credsatupper2, credsatlower2, \    someunitunder30, referredcore,referredoption,deferredcore,deferredoption,deferredcredits,dfthisstudent = analysisstudentfinalyear(filename, anid)    #print(finalyearmark)        #print('Creds at first ',credsatfirst)    # Remove referred/deferred courses if not Y1/Y2    if (classyear != 1 and classyear !=2):        referredcore = ''        referredoption = ''        deferredcore = ''        deferredoption = ''        # if a M/P student, get final year physics mark    if(finalyearmathsmark>0 and mathsphys==1):        #print('#############',creditstaken,mathscreditstaken)        #finalyearphysicsmark=(finalyearmark*creditstaken-finalyearmathsmark*mathscreditstaken)/(creditstaken-mathscreditstaken)        finalyearphysicsmark=(finalyearmark*creditsformeansum-finalyearmathsmark*mathscreditstaken)/(creditsformeansum-mathscreditstaken)    else:        finalyearphysicsmark=finalyearmark            # final year mark to 1 d.p. (as per the other years) ensuring no rounding to lower integer    finalyearmark = round(finalyearmark + 0.00000001, 1)    finalyearmathsmark = round(finalyearmathsmark + 0.00000001, 1)    finalyearphysicsmark = round(finalyearphysicsmark + 0.00000001, 1)    #print(progtaken,finalyearmark, finalyearphysicsmark, finalyearmathsmark)        # Progression for year 1 (BSc and MPhys) and year 2 (BSc only) for non-M+P students - MPhys has extra criteria (see below)    if((classyear==1 or classyear==2)):                # need to pass 80 credits, inc lab (if <40 credits in 30-39% range, they are compensated)        if (someunitunder30==0 and faillabprog==0 and creditspassed+deferredcredits>=80):            status = 'ACTV'   # active (progress)            fail = 0            progress=1            resitstriggered=0            referredcore=''     # No referred courses            referredoption=''   # No referred options            #print(creditspassed,deferredcredits,creditstaken)            if ((creditspassed+deferredcredits) < creditstaken): # add _C to the dataframe for courses compensated (30-39) for output                #print('hello Im in this loop now')                dfthisstudent = add_C_codes(dfthisstudent,optiononly=False)             #if (anid == '10128527'):            #    sys.exit(0)            #if (float(stumarks[i])>29.95):            #    stumarks[i]=stumarks[i] + '_X_C' # compensated/not resat (Y1/2 (non-M+P) only)            #    stumarks[i+1] = '_X_C'           # for easiest omitting from resit list later                        # if any units <30% or >40 credits below 40, trigger resits for all <30 and core 30-39        elif (faillabprog==0 and (creditspassed+deferredcredits>=60) and (someunitunder30>0 or (creditstaken-creditspassed-deferredcredits)>=40)):                             if ((deferredcredits > 0) and (not referredcore and not referredoption)): status='A/D'  # A/D if deferred and no referred courses            else: status='REVW' # resits so review unless deferred then A/D            fail = 0            progress = 0            resitsriggered=1            #referredcore=''   # set already inside analysisstudentfinalyear()            #referredoption='' # set already inside analysisstudentfinalyear()            # Need to record triggerd resits (incl. core course 30-39, and M+P core maths courses)             if (not mathsphys):                add_C_codes(dfthisstudent,optiononly=True,corelist=isphysicscore)  # add _C to non-core courses that are being compensated            #else:            #    add_C_codes(dfthisstudent,optiononly=True,corelist=isphysicscore)  # add _C to non-core courses that are being compensated                            #if (anid == '10225651'):            #    print(creditstaken,creditspassed,deferredcredits,creditstaken-creditspassed-deferredcredits)            #    if (not referredcore and not referredoption): print('Nothing referred')            #    sys.exit(0)                        elif (creditspassed+deferredcredits<60):  # at least 60 credits passed (>40%) needed to stay on course             status = 'FAIL' # outright fail            fail=1            progress=0            resitstriggered=0            referredcore=''              referredoption=''            deferredcore=''            deferredoption=''        else:  # jsut in case the above don't catch everything! (this shouldn't happen!)            print('*ERROR: progression not set for student {0:s} {1:s}'.format(anid,selected["Name"].values[0]))            print('*ERROR: this SHOULD NOT HAPPEN SO PLEASE CHECK CODE CAREFULLY!')    # Additional criteria for year 2 progression on 4 year course     if (classyear==2 and ('MPhys' in progtaken or 'Math' in progtaken)):        if (finalyearmark < 53 and creditspassed+deferredcredits>=80 and not referredcore and not referredoption):            status = 'R/BSc'  # MPhys student not achieved 53%            fail = 1            progress = 0            resitstriggered=0            referredcore= ''            referredoption = ''        if (finalyearmark < 55 and finalyearmark >52.95 and creditspassed+deferredcredits>=80 and not referredcore and not referredoption):            status = 'R/X'   # borderline 53-55%: possible continuation after review in January, otherwise move to BSc            fail = 0            progress = 1        #if ('Europe' in progtaken): # additional requirements for Study in Europe (not implemented because requires S3 mark)        #    if (finalyearmark < 58):   # or s3mark < 55):    ***NEEDS S3 MARK!!        #        status = 'R/BSc'   # Move to BSc        #        fail = 1        #        progress = 0            #if (finalyearmark > 58 and (s3mark > finalyearmark >=58): # potential case to be made for borderlines            #    status = 'R/X'    # Year 3 progression (MPhys)    if(classyear==31):        # 3 to 4 progression        # here we need the overall mark        overallmark, overallmathsmark, overallphysicsmark = getoverallmark(maths1, maths2, maths3, yearmark3, phys1,                                                                           phys2, phys3, finalyearmark,                                                                           finalyearmathsmark, finalyearphysicsmark,                                                                           classyear,progtaken,deganalysis,1)        overallmark = round(overallmark + 0.00000001, 1)        overallmathsmark = round(overallmathsmark + 0.00000001, 1)        overallphysicsmark = round(overallphysicsmark + 0.00000001, 1)                # 3->4 progression rules        # we need a to pass >80 credits taken, inc lab,        if (faillabprog==0 and creditspassed>=80 and finalyearmark>=50. and overallmark>=50.):            status = 'ACTV'            fail = 0            progress=1        elif (faillabprog==0 and creditspassed>=80 and (finalyearmark>=48. or overallmark>=48.) ):  # borderline goes to review            status = 'REVW'            fail = 1            progress = 0        else:  # MPhys Fail -> BSc            #print("year 31 fail.",faillabprog,creditspassed,finalyearmark,phys3)            if (overallmark>59.95): status = 'REVW BSc 2:1'            elif (overallmark>49.95): status = 'REVW BSc 2:2'            elif (overallmark>39.95): status = 'REVW BSc 3'            else: status = 'REVW'            fail = 1            progress=0    # Additional requirement for M+P students to get >45% M+P separately to progress     if (studtype==2 and (classyear==1 or classyear==2 or classyear==31)):         if (faillabprog==0 and creditspassed>=80 and (finalyearmathsmark<45 or finalyearphysicsmark<45)): # >45% M+P separately            status = 'REVW'            fail = 1            progress = 0            if (classyear==31):                       if (overallmark>59.95): status = 'REVW BSc 2:1'                elif (overallmark>49.95): status = 'REVW BSc 2:2'                elif (overallmark>39.95): status = 'REVW BSc 3'                else: status = 'REVW'                fail = 1                progress = 0                                    # Add status for referred/deferred courses if any exist if not a definite fail and check output mark codes for resits    if ((deferredcore or deferredoption) and status != 'FAIL'): status = 'A/D'   # for any deferred resits    if ((referredcore or referredoption) and status != 'FAIL'):        status = 'REVW'  # for any resits   # this overrides any deferred courses        dfthisstudent = add_R_to_resitmarks(dfthisstudent,referredcore,referredoption)   # add "_R" to output marks (if not ready there)        # Combine referrals (core/option) and deferalls (core/option) into single columns for each for easier output and all resits in one column for easier output    referredcourses = referredcore + referredoption    deferredcourses = deferredcore + deferredoption    resitcourses    = deferredcourses + referredcourses            # remove resit courses etc if definite FAIL e.g. XL_D no longer needed, but still keep XL, XN etc.    if (status == 'FAIL'):        dfthisstudent.replace('_D','',regex=True,inplace=True)        #dfthisstudent.replace('_R.+','',regex=True,inplace=True)        #dfthisstudent.replace('_C.+','',regex=True,inplace=True)    # Add status column after applying progression rules    dfthisstudent['Status'] = status                # produce final year O/M/P string as preferred output in spreadsheet    finalyear_omp_str = '{0:.1f} / {1:.1f} / {2:.1f}'.format(round(finalyearmark+0.0000001,1),round(finalyearmathsmark+0.0000001,1),round(finalyearphysicsmark+0.0000001,1))    dfthisstudent['Final Year Mark'] = finalyearmark    dfthisstudent['Final Year Maths Mark'] = finalyearmathsmark    dfthisstudent['Final Year Physics Mark'] = finalyearphysicsmark    dfthisstudent['Final Year O/M/P'] = finalyear_omp_str    # Remove unused units listed in "ignore_courses" to save space on output and resequence unit numbers    dfthisstudent = remove_unused_units(dfthisstudent,ignore_courses)        if(deganalysis):        #print('*',finalyearmark,finalyearphysicsmark,finalyearmathsmark)        #print('*',phys1,maths1,finalyearmark,finalyearphysicsmark,finalyearmathsmark)        overallmark, overallmathsmark, overallphysicsmark = getoverallmark(maths1,maths2,maths3,yearmark3,phys1, phys2, phys3,finalyearmark,finalyearmathsmark,finalyearphysicsmark, classyear,progtaken,deganalysis,0)        overallmark = round(overallmark + 0.00000001, 1)        overallmathsmark = round(overallmathsmark + 0.00000001, 1)        overallphysicsmark = round(overallphysicsmark + 0.00000001, 1)        #print('**',overallmark, overallphysicsmark,overallmathsmark)                # produce overall O/M/P string as preferred output in spreadsheet        overall_omp_str = '{0:.1f} / {1:.1f} / {2:.1f}'.format(overallmark,overallmathsmark,overallphysicsmark)        dfthisstudent['Overall O/M/P'] = overall_omp_str        #print('Overall O/M/P: ', overall_omp_str)         dfthisstudent['Credits to get BSc/MPhys Good'] = creditstogetBScgood        dfthisstudent['Credits to get BSc Lower'] = creditstogetBSclower        dfthisstudent['Credits at First'] = credsatfirst        dfthisstudent['Credits at Upper 2'] = credsatupper2        dfthisstudent['Credits to Lower 2'] = credsatlower2        dfthisstudent['Phys 1'] = phys1        dfthisstudent['Phys 2'] = phys2        dfthisstudent['Phys 3'] = phys3        dfthisstudent['Maths 1'] = maths1        dfthisstudent['Maths 2'] = maths2        dfthisstudent['Maths 3'] = maths3        dfthisstudent['Year 3 Mark'] = yearmark3    if (deganalysis or classyear==31):        dfthisstudent['Overall Mark'] = overallmark        dfthisstudent['Overall Maths Mark'] = overallmathsmark        dfthisstudent['Overall Physics Mark'] = overallphysicsmark    if(classyear==1 or classyear==2):        dfthisstudent['Credits to get BSc/MPhys Good'] = creditstogetBScgood        dfthisstudent['Credits to get BSc Lower'] = creditstogetBSclower        dfthisstudent['Maths Credits Taken'] = mathscreditstaken        dfthisstudent['Maths Credits Passed'] = mathscreditspassed        dfthisstudent['Fail'] = fail        dfthisstudent['Lab/Proj Fail'] = faillabprog        dfthisstudent['Progress'] = progress        dfthisstudent['Resits Triggered'] = resitstriggered        dfthisstudent['Mark Under 30'] = someunitunder30        dfthisstudent['Referrals Core'] = referredcore        dfthisstudent['Referrals Option'] =referredoption        dfthisstudent['Deferrals Core'] = deferredcore        dfthisstudent['Deferrals Option'] = deferredoption        dfthisstudent["Referrals"] = referredcourses        dfthisstudent["Deferrals"] = deferredcourses        dfthisstudent["Resits"] = resitcourses                if(classyear==31):        dfthisstudent['Credits to get BSc/MPhys Good'] = creditstogetBScgood        dfthisstudent['Credits to get BSc Lower'] = creditstogetBSclower        dfthisstudent['Phys 1'] = phys1        dfthisstudent['Phys 2'] = phys2        dfthisstudent['Maths 1'] = maths1        dfthisstudent['Maths 2'] = maths2        dfthisstudent['Fail'] = fail        dfthisstudent['Lab/Proj Fail'] = faillabprog        dfthisstudent['Progress'] = progress    if (classyear == 2 and deganalysis == 0):   # output blank columns when CF file not available simply to stop code crashing        overallmark = -1        honours = -1        dfthisstudent['Phys 1'] = -1        dfthisstudent['Maths 1'] = -1        dfthisstudent['Overall Mark'] = -1        dfthisstudent['Overall Maths Mark'] = -1        dfthisstudent['Overall Physics Mark'] = -1        dfthisstudent['Overall O/M/P'] = -1            if (deganalysis):        # get overall class        if('BSc'in progtaken):            honours, degclass = getBScDegClass(overallmark, creditspassed)        elif('MPhys' or 'Math' in progtaken):            honours, degclass = getMPhysDegClass(overallmark, creditspassed)        else:            print('Error : do not know degree type',anid,progtaken)                # cohort variables.        cohortmean+=overallmark        cohortcreditpassedmean+=creditspassed        cohortcredittakenmean+=creditstaken        cohortcount += 1        #print('degree class for ',anid,degclass)        #print(cohortcount)        #print('first=', numberfirsts, ' 2:1=', numberupper2, ' 2:2=', numberlower2, 'fails=', numberfail, ' Sum all=',            #numberfirsts + numberlower2 + numberupper2+numberfail)        borderline=-1.        algAprom = -1        algBprom = -1        # promotion if on borderline        if(doingborderline):            borderline=0            if( (overallmark >= borderfirst and overallmark <70) or (overallmark >= borderupper2 and overallmark <60) or (overallmark >= borderlower2 and overallmark <50) or (overallmark>=borderthird and overallmark<40)):                #print('borderline')                borderline=1                numberborderline+=1                algAprom=0                algBprom=0                #print('###')                #print(progtaken,degclass,credsatfirst,credsatupper2,credsatlower2)                #print(progtaken,degclass, credsatfirst, credsatupper2, credsatlower2,finalyearmark,overallmark,projectmark)                algAprom=algorithmA(progtaken,degclass,credsatfirst,credsatupper2,credsatlower2)                algBprom=algorithmB(progtaken,degclass, credsatfirst, credsatupper2, credsatlower2,finalyearmark,overallmark,projectmark)            if(borderline and (algAprom==1 or algBprom==1)):                # promote by algorithm A or B                #print('promote')                degclass+=1                   if(algAprom==1): numberPApromote+=1                if(algAprom == 0 and algBprom == 1): numberPBpromote += 1  # only promote to B if algA not successful        # get number in each class after promotion        if(degclass==4.): numberfirsts += 1        if (degclass == 3.): numberupper2 += 1        if (degclass == 2.): numberlower2 += 1        if (degclass == 1.): numberthird += 1        if (degclass == 0.): numberordinary += 1        if (degclass==-1.): numberfail+=1        # also convert deg class to a string for output later         if (borderline and (algAprom==1 or algBprom==1)): # **if promoted, keep original (-1) deg class            degclass_str = degclass_to_string(progtaken,degclass-1)        else:  # for everyone else            degclass_str = degclass_to_string(progtaken,degclass)        # Add P(A) or P(B) to deg class string if promoted         if (algAprom == 1):            degclass_str = degclass_str + ' P(A)'        if (algAprom < 1 and algBprom == 1):            degclass_str = degclass_str + ' P(B)'                    # output to students data frame        dfthisstudent['Deg Class ID'] = degclass        dfthisstudent['Deg Class'] = degclass_str        dfthisstudent['Honours'] = honours        dfthisstudent['Borderline'] =borderline        dfthisstudent['Alg A'] = algAprom        dfthisstudent['Alg B'] =algBprom    # append to main dataframe    dfallstudents = dfallstudents.append(dfthisstudent)# Put in blanks for alternative rows for easy output laterif(classyear==4 or classyear==32):    for ind in dfallstudents.index:        if(dfallstudents['Emplid'][ind]==''):            dfallstudents["Credits Taken"][ind] = ''            dfallstudents["Credits Passed"][ind] = ''            dfallstudents["Credits to get BSc/MPhys Good"][ind] = ''            dfallstudents["Credits to get BSc Lower"][ind] = ''            dfallstudents["Project Mark"][ind] = ''            dfallstudents["Final Year Mark"][ind] = ''            dfallstudents["Phys 1"][ind] = ''            dfallstudents["Phys 2"][ind] = ''            dfallstudents["Phys 3"][ind] = ''            dfallstudents["Maths 1"][ind] = ''            dfallstudents["Maths 2"][ind] = ''            dfallstudents["Maths 3"][ind] = ''            dfallstudents["Overall Mark"][ind] = ''            dfallstudents["Overall Maths Mark"][ind] = ''            dfallstudents["Overall Physics Mark"][ind] = ''            dfallstudents["Borderline"][ind] = ''            dfallstudents["Alg A"][ind] = ''            dfallstudents["Alg B"][ind] = ''            dfallstudents["Deg Class"][ind] = ''            dfallstudents["Courses Included"][ind] = ''            dfallstudents["Honours"][ind] = ''            dfallstudents["Courses Excluded"][ind] = ''            dfallstudents["Credits Excluded"][ind] = ''            dfallstudents["Final Year Maths Mark"][ind] = ''            dfallstudents["Final Year Physics Mark"][ind] = ''            dfallstudents["Year 3 Mark"][ind] = ''            dfallstudents['Credits at First'] = ''            dfallstudents['Credits at Upper 2'] = ''            dfallstudents['Credits to Lower 2'] = ''            dfallstudents['Status'][ind] = ''            if(classyear==1):    for ind in dfallstudents.index:        if(dfallstudents['Emplid'][ind]==''):            dfallstudents['Plan'][ind] = ''            dfallstudents["Credits Taken"][ind] = ''            dfallstudents["Credits Passed"][ind] = ''            dfallstudents["Maths Credits Taken"][ind] = ''            dfallstudents["Maths Credits Passed"][ind] = ''            dfallstudents["Final Year Mark"][ind] = ''            dfallstudents["Courses Included"][ind] = ''            dfallstudents["Courses Excluded"][ind] = ''            dfallstudents["Credits Excluded"][ind] = ''            dfallstudents["Final Year Maths Mark"][ind] = ''            dfallstudents["Final Year Physics Mark"][ind] = ''            dfallstudents['Fail'][ind] = ''            dfallstudents['Lab/Proj Fail'][ind] = ''            dfallstudents['Progress'][ind] = ''            dfallstudents['Resits Triggered'][ind] = ''            dfallstudents['Referrals Core'][ind] = ''            dfallstudents['Referrals Option'][ind] = ''            dfallstudents['Deferrals Core'][ind] = ''            dfallstudents['Deferrals Option'][ind] = ''            dfallstudents['Referrals'][ind] = ''            dfallstudents['Deferrals'][ind] = ''            dfallstudents['Resits'][ind] = ''            dfallstudents['Mark Under 30'][ind] = ''            dfallstudents['Status'][ind] = ''            if(classyear==2):    for ind in dfallstudents.index:        if(dfallstudents['Emplid'][ind]==''):            dfallstudents['Plan'][ind] = ''            dfallstudents["Credits Taken"][ind] = ''            dfallstudents["Credits Passed"][ind] = ''            dfallstudents["Credits to get BSc/MPhys Good"][ind] = ''            dfallstudents["Credits to get BSc Lower"][ind] = ''            dfallstudents["Maths Credits Taken"][ind] = ''            dfallstudents["Maths Credits Passed"][ind] = ''            dfallstudents["Final Year Mark"][ind] = ''            dfallstudents["Courses Included"][ind] = ''            dfallstudents["Courses Excluded"][ind] = ''            dfallstudents["Credits Excluded"][ind] = ''            dfallstudents["Final Year Maths Mark"][ind] = ''            dfallstudents["Final Year Physics Mark"][ind] = ''            dfallstudents['Fail'][ind] = ''            dfallstudents['Lab/Proj Fail'][ind] = ''            dfallstudents['Progress'][ind] = ''            dfallstudents['Resits Triggered'][ind] = ''            dfallstudents['Referrals Core'][ind] = ''            dfallstudents['Referrals Option'][ind] = ''            dfallstudents['Deferrals Core'][ind] = ''            dfallstudents['Deferrals Option'][ind] = ''            dfallstudents['Referrals'][ind] = ''            dfallstudents['Deferrals'][ind] = ''            dfallstudents['Resits'][ind] = ''            dfallstudents['Mark Under 30'][ind] = ''            dfallstudents['Status'][ind] = ''            if (deganalysis==1):                dfallstudents["Project Mark"][ind] = ''                dfallstudents["Phys 1"][ind] = ''                dfallstudents["Maths 1"][ind] = ''                dfallstudents["Overall Mark"][ind] = ''                dfallstudents["Overall Maths Mark"][ind] = ''                dfallstudents["Overall Physics Mark"][ind] = ''                dfallstudents["Borderline"][ind] = ''                dfallstudents["Alg A"][ind] = ''                dfallstudents["Alg B"][ind] = ''                dfallstudents["Deg Class"][ind] = ''                dfallstudents["Honours"][ind] = ''                dfallstudents["Year 3 Mark"][ind] = ''                dfallstudents['Credits at First'] = ''                dfallstudents['Credits at Upper 2'] = ''                dfallstudents['Credits to Lower 2'] = ''                if(classyear==31):    for ind in dfallstudents.index:        if(dfallstudents['Emplid'][ind]==''):            dfallstudents['Fail'][ind] = ''            dfallstudents['Lab/Proj Fail'][ind] = ''            dfallstudents['Progress'][ind] = ''            dfallstudents["Credits Taken"][ind] = ''            dfallstudents["Credits Passed"][ind] = ''            dfallstudents['Courses Included'][ind] = ''            dfallstudents['Courses Excluded'][ind] = ''            dfallstudents['Final Year Mark'][ind] = ''            dfallstudents['Final Year Maths Mark'][ind] = ''            dfallstudents['Final Year Physics Mark'][ind] = ''            dfallstudents['Overall Mark'][ind] = ''            dfallstudents["Credits to get BSc/MPhys Good"][ind] = ''            dfallstudents["Credits to get BSc Lower"][ind] = ''            dfallstudents["Phys 1"][ind] = ''            dfallstudents["Phys 2"][ind] = ''            dfallstudents["Maths 1"][ind] = ''            dfallstudents["Maths 2"][ind] = ''            dfallstudents["Overall Maths Mark"][ind] = ''            dfallstudents["Overall Physics Mark"][ind] = ''            dfallstudents["Project Mark"][ind] = ''            dfallstudents["Credits Excluded"][ind] = ''            dfallstudents['Status'][ind] = ''if(studtype==2 and deganalysis==1):    for ind in dfallstudents.index:        if(dfallstudents['Emplid'][ind]==''):            dfallstudents['Final Year O/M/P'][ind] = ''            dfallstudents['Overall O/M/P'][ind] = ''if(studtype==2 and deganalysis==0):    for ind in dfallstudents.index:        if(dfallstudents['Emplid'][ind]==''):            dfallstudents['Final Year O/M/P'][ind] = ''            if(deganalysis):    print('')    #print('No exclusions and standard 80/60 rules:')    print('Cohort count = {0:d}'.format(cohortcount))    print('Cohort mean mark = {0:.2f}'.format(cohortmean/cohortcount))    print('Mean credits taken = {0:.2f}  Mean credits passed = {1:.2f}'.format(cohortcredittakenmean/cohortcount, cohortcreditpassedmean/cohortcount))    print('First=',numberfirsts,' 2:1=',numberupper2,' 2:2=',numberlower2, ' Sum honours=',numberfirsts+numberlower2+numberupper2)    print('Thirds (BSc)=',numberthird,' ordinary (BSc)=',numberordinary)    print('Borderline=',numberborderline,' Number algorithmA=',numberPApromote,' Number algorithmB=',numberPBpromote)    print('Fails=',numberfail,' Sum all=',numberfirsts+numberlower2+numberupper2+numberthird+numberordinary+numberfail)# Remove unnecessary columns by handdel df['PSI']# default sheet namesheet_name = 'PyAsssess2021.py'# set columns before writing out# final yearif(classyear==4):    if (studtype == 1):        columns=["Emplid",                "Name",                "Plan",                "Unit 1",                "Unit 2",                "Unit 3",                "Unit 4",                "Unit 5",                "Unit 6",                "Unit 7",                "Unit 8",                "Unit 9",                "Unit 10",                "Unit 11",                "Unit 12",                "Credits Taken",                "Credits Passed",                "Phys 1",                "Phys 2",                "Phys 3",                "Final Year Mark",                "Overall Mark",                "Deg Class"]                #"Courses Excluded"]                #"Courses Included",                #"Credits Excluded"]    else:        columns=["Name",                "Plan",                "Unit 1",                "Unit 2",                "Unit 3",                "Unit 4",                "Unit 5",                "Unit 6",                "Unit 7",                "Unit 8",                "Unit 9",                "Unit 10",                "Unit 11",                "Credits Taken",                "Credits Passed",                "Phys 1",                "Phys 2",                "Phys 3",                "Maths 1",                "Maths 2",                "Maths 3",                "Year 3 Mark",                "Final Year O/M/P",                "Overall O/M/P",                "Deg Class"]                #"Courses Excluded"]                #"Courses Included",                #"Credits Excluded"]    # final year BScif(classyear==32):    if (studtype == 1):        columns=["Name",                "Plan",                "Unit 1",                "Unit 2",                "Unit 3",                "Unit 4",                "Unit 5",                "Unit 6",                "Unit 7",                "Unit 8",                "Unit 9",                "Unit 10",                "Unit 11",                "Unit 12",                "Unit 13",                "Credits Taken",                "Credits Passed",                "Phys 1",                "Phys 2",                "Final Year Mark",                "Overall Mark",                "Deg Class"]                #"Courses Excluded"]                #"Project Mark",                #"Borderline",                #"Courses Included",                #"Credits at First",                #"Credits at Upper 2",                #"Credits to Lower 2"]    else:        columns=["Emplid",                "Name",                "Plan",                "Unit 1",                "Unit 2",                "Unit 3",                "Unit 4",                "Unit 5",                "Unit 6",                "Unit 7",                "Unit 8",                "Unit 9",                "Unit 10",                "Unit 11",                "Unit 12",                "Unit 13",                "Credits Taken",                "Credits Passed",                "Phys 1",                "Phys 2",                "Maths 1",                "Maths 2",                "Final Year O/M/P",                "Overall O/M/P",                "Deg Class"]                #"Courses Excluded"]                #"Courses Included",                #"Courses Excluded",                #"Credits Excluded",                #"Credits at First",                #"Credits at Upper 2",                #"Credits to Lower 2"]        # 1st to secondif (classyear == 1):    if (studtype == 1):        columns=["Emplid",                "Name",                "Plan",                "Unit 1",                "Unit 2",                "Unit 3",                "Unit 4",                "Unit 5",                "Unit 6",                "Unit 7",                "Unit 8",                "Unit 9",                "Unit 10",                "Unit 11",                "Unit 12",                "Unit 13",                "Unit 14",                "Credits Taken",                "Credits Passed",                "Final Year Mark",                "Status",                "Resits"]                #"Courses Excluded",]                # "Credits Excluded"]    else:        columns=["Emplid",                "Name",                "Plan",                "Unit 1",                "Unit 2",                "Unit 3",                "Unit 4",                "Unit 5",                "Unit 6",                "Unit 7",                "Unit 8",                "Unit 9",                "Unit 10",                "Unit 11",                "Unit 12",                "Unit 13",                "Unit 14",                "Unit 15",                "Credits Taken",                "Credits Passed",                "Final Year O/M/P",                "Status",                "Resits"]                #"Courses Excluded",]                #"Credits Excluded"]# 2nd to 3rdif (classyear == 2):    if (studtype == 1):        columns=["Emplid",                "Name",                "Plan",                "Unit 1",                "Unit 2",                "Unit 3",                "Unit 4",                "Unit 5",                "Unit 6",                "Unit 7",                "Unit 8",                "Unit 9",                "Unit 10",                "Unit 11",                "Unit 12",                "Unit 13",                "Unit 14",                "Unit 15",                "Credits Taken",                "Credits Passed",                "Phys 1",                          "Final Year Mark",                "Overall Mark",                "Status",                "Resits"]                #"Courses Excluded"                #"Courses Included",                # "Credits Excluded"]                #"Fail",                #"Lab/Proj Fail",                #"Progress",                #"Resits Triggered",                #"Mark Under 30",    else:        columns=["Emplid",                "Name",                "Plan",                "Unit 1",                "Unit 2",                "Unit 3",                "Unit 4",                "Unit 5",                "Unit 6",                "Unit 7",                "Unit 8",                "Unit 9",                "Unit 10",                "Unit 11",                "Unit 12",                "Unit 13",                "Unit 14",                "Credits Taken",                "Credits Passed",                'Maths Credits Taken',                'Maths Credits Passed',                "Phys 1",                "Maths 1",                "Final Year O/M/P",                "Overall O/M/P",                "Status",                "Resits"]                #"Courses Excluded",]                #"Fail",                #"Lab/Proj Fail",                #"Progress",                #"Resits Triggered",                #"Mark Under 30",                #"Courses Included",                #"Credits Excluded"]# 3rd year to 4th yearif (classyear == 31):    if (studtype == 1):        columns=["Emplid",            "Name",            "Plan",            "Unit 1",            "Unit 2",            "Unit 3",            "Unit 4",            "Unit 5",            "Unit 6",            "Unit 7",            "Unit 8",            "Unit 9",            "Unit 10",            "Unit 11",            "Unit 12",            "Unit 13",            "Unit 14",            "Credits Taken",            "Credits Passed",            "Phys 1",            "Phys 2",            "Final Year Mark",            "Overall Mark",            "Status"]            #"Courses Excluded"]            #"Courses Included",            #"Credits Excluded"]    else:        columns=["Emplid",                "Name",                "Plan",                "Unit 1",                "Unit 2",                "Unit 3",                "Unit 4",                "Unit 5",                "Unit 6",                "Unit 7",                "Unit 8",                "Unit 9",                "Unit 10",                "Unit 11",                "Unit 12",                "Unit 13",                "Unit 14",                "Credits Taken",                "Credits Passed",                "Phys 1",                "Phys 2",                "Maths 1",                "Maths 2",                "Final Year O/M/P",                "Overall O/M/P",                "Status"]                #"Courses Excluded"]###### Optionally sort the data by mark (year mark if progressing, overall mark if graduating)sortdata = True# progressing studentsif (sortdata and (classyear==1 or classyear==2 or classyear==31)):    for i in np.arange(0,dfallstudents.shape[0]-1,2): dfallstudents["Final Year Mark"].values[i+1] = dfallstudents["Final Year Mark"].values[i]    dfallstudents.sort_values(by="Final Year Mark",ascending=False,inplace=True,kind='mergesort')    for i in np.arange(0,dfallstudents.shape[0]-1,2): dfallstudents["Final Year Mark"].values[i+1] = ''    # graduating studentsif (sortdata and (classyear==32 or classyear==4)):    for i in np.arange(0,dfallstudents.shape[0]-1,2): dfallstudents["Overall Mark"].values[i+1] = dfallstudents["Overall Mark"].values[i]    dfallstudents.sort_values(by="Overall Mark",ascending=False,inplace=True,kind='mergesort')    for i in np.arange(0,dfallstudents.shape[0]-1,2): dfallstudents["Overall Mark"].values[i+1] = ''###### Optionally add codes at the bottom of the spreadsheetaddcodes = Trueif (addcodes):    code_info = np.array([['',''],                ['Key:',''], ['',''],                 ['Sp.','Mitigating Circumstances'],                 ['#','Mit Circs not accepted'],                ['#*','Mit Circs acc; no action'],                ['#**','Mit Circs acc; action taken'],                ['',''],                ['ACTV','Met progression criteria (BSc/MPhys)'],                ['REVW','Review (resits)'],                ['A/D', 'Deferred units'],                ['R/X','MPhys student not achieved 55%'],                ['R/BSc','MPhys student not achieved 52%'],                ['FAIL','Failed due to <40% or <60 credits'],                ['',''],                ['XL','Absent from exam, with reason'],                ['XN','Absent from exam, no reason'],                ['X','Mark excluded'],                ['X1','Resit at first attempt']])    nrows = np.shape(code_info)[0]   # number of extra rows to add    tempdf = dfallstudents[0:nrows].copy()  # temporary df    tempdf[:] = ''  # blank values    for i in np.arange(nrows):  # add code info        tempdf["Emplid"][i:i+1] = code_info[i,0]        tempdf["Name"][i:i+1]   = code_info[i,1]    dfallstudents = pd.concat([dfallstudents,tempdf])   # add df's together        ###### output to Excel spreadsheettry:    writer = pd.ExcelWriter(outfilename, engine='xlsxwriter')except:    print('\nERROR writing out file. Please check directory...\n')    sys.exit(0)    # output columns to excel spredsheet directly from Data Framedfallstudents.to_excel(writer,index=False,sheet_name=sheet_name,columns=columns)# Change column width/formatting before finally writing outworkbook = writer.bookworksheet = writer.sheets[sheet_name]i = 0for column_str in columns:    col_idx = i  # dfallstudents.columns.get_loc(column_str)    if (column_str == 'Emplid'): col_width=8    elif (column_str == 'Name'): col_width=15    elif (column_str == 'Plan'): col_width=20    elif (column_str.find('Unit') >= 0): col_width=9    elif (column_str.find('Credits') >= 0): col_width=9    elif (column_str.find('Final Year Physics Mark') >=0): col_width=18    elif (column_str.find('Final Year Maths Mark') >=0): col_width=16    elif (column_str.find('Overall Physics') >=0): col_width=15    elif (column_str.find('Overall Maths') >=0): col_width=13    elif (column_str.find('Phys') >= 0): col_width=6    elif (column_str.find('Maths') >= 0): col_width=7    elif (column_str.find('Year 3 Mark') >=0): col_width=8    elif (column_str.find('O/M/P') >=0): col_width=14    elif (column_str.find('Status') >=0): col_width=8    elif (column_str.find('Deg Class') >= 0): col_width=15    elif (column_str.find('Resits') >= 0): col_width=15    else: col_width=12  # deafult column width    writer.sheets[sheet_name].set_column(col_idx, col_idx, col_width)    i = i+1# make banded rows and slightly larger cells for easier viewing#format1_pale = workbook.add_format({'bg_color': '#FFFFCC'})format1_grey = workbook.add_format({'bg_color': '#E0E0E0'})cellheight = 17  # (Excel default is 15)for row in range(1, dfallstudents.count()[0]-nrows, 2):    worksheet.set_row(row, cellheight, cell_format=format1_grey)# Write out and finishwriter.save()print('Processing complete and output written to {:s}'.format(outfilename))    