# Physics and Astronomy Exam assessment code# Takes in exam grids (csv files) and produces output exam grids, with averages etc.# # This script requires Pandas## Checked:#    BSc Physics: year marks (std and C19), overall marks#    MPhys Physics: year marks (std and C19), overall marks## Not correct for: Maths and Physics (BSc and MMP), MPhys with Y3 abroad not Euro# Not handling Y3 MPhys progression# Not handling mit circs exclusions# Not handling industrial placement##    getoverallmark:MATH39032## HISTORY## 12-May-2021  C. Dickinson   Started with updated PyAssessV5.py from Rob Appelby# Specific changes made for AY 2020/2021 (not including tidying up/reformatting etc.)## 1. 13-May-2021: Changed borderlines for 2021 regs (2,2,3) rather than (3,3,4) below borders# 2. 13-May-2021: Removed output Maths only columns for non-M+P students# 3. 13-May-2021: Added deg class string for outputing to final grid (rather than a single number)# 4. 14-May-2021: Changed credit weighting for PHYS20811 ################################################################## importsfrom typing import Anyimport pandas as pdimport numpy as np#import matplotlib.pyplot as plt#from scipy.stats import linregressimport sysimport itertoolsfrom decimal import Decimalpd.options.mode.chained_assignment = None  # default='warn'# used for skipping first few rows of CS grid (note system dependent)def rowskiplogic(index):    if index==0 or index==1 or index==2 or index==3:       return True    return Falsedef rowskiplogiccourse(index):    if index==0 or index==1 or index==2 or index==3:       return True    return False# convert degree class to a string for output griddef degclass_to_string(progtaken,degclass):    # deg classification    degclass_dict = {        4:"1",        3:"2:1",        2:"2:2",        1:"3",        0:"Ord.",        -1:"Fail",        -2:"NOT SET!!!"}    # degree type    degstr = progtaken.split('(')[0] + ' '                return degstr + degclass_dict[degclass]    ################################################################# INPUTS################################################################# Switch between BSc (classyear=3) and MPhys (classyear=4)# 1=1st year, 2=2nd year, 31=3rd prog, 32=3rd complete ,4=4th year########classyear=4# 1=physics, 2=MPstudtype=1########## program locationexcelDir='./'#1920 dataif(classyear==1):    #excelFilename = '/data1920_AY2021/1styr_07_07_20 postmcc.csv'    excelFilename = '/newyears12_250820/1styr_19.08.20.csv'    # if we have carry forward we can compute degree class, so turn this on    deganalysis = 0    # perform borderline checks, yes/no    doingborderline = 0    # give real credits for vacation essay    giverealcredits = 1if (classyear == 2):    # excelFilename = '/data1920/4thyr test grid_16.06.20.csv'    #excelFilename = '/newyears12_250820/2ndyr_19.08.20.csv'    excelFilename = '/Resit2020_input/2ndyr_03.09.20.csv'    # if we have carry forward we can compute degree class, so turn this off as its second year    deganalysis = 0    # perform borderline checks, yes/no    doingborderline = 0    # give real credits for vacation essay    giverealcredits = 1if(classyear==32):    #excelFilename='/data1920/3rdyr BSc Physics 80 credits v2 with external.csv'    excelFilename = '/data1819/3rdyr_18_06_19_external.csv'    CFfilename = '/Carryforward/3rdyr_carryforward.csv'    # if we have carry forward we can compute degree class, so turn this on    deganalysis = 1    # perform borderline checks, yes/no    doingborderline = 1    # give real credits for vacation essay    giverealcredits = 1if (classyear == 31):    excelFilename = '/data1920_AY2021/3rdyr_07_07_20 MPhys postmcc_updated.csv'    CFfilename = '/data1920/cf3.csv'    # if we have carry forward we can compute degree class, so turn this on    deganalysis = 0    # perform borderline checks, yes/no    doingborderline = 0    # give real credits for vacation essay    giverealcredits = 1if(classyear==4):    excelFilename = '/data1819/4thyr_18_06_19_external.csv'    CFfilename='/Carryforward/4thyr_carryforward.csv'    # if we have carry forward we can compute degree class, so turn this on    deganalysis = 1    # perform borderline checks, yes/no    doingborderline = 1    # give real credits for vacation essay    giverealcredits = 1# final filenamefilename=excelDir+excelFilename# defaultcreditstogetMPHYS = 80creditstogetBScgood=80creditstogetBSclower=60boundaryfirst=69.95boundaryupper2=59.95boundarylower2=49.95boundarythird=39.95# any students to skipdonotprocess={}################################################################# some data definitions################################################################# define core for purposes of triggering resitsiscore={'PHYS10071','PHYS10101','PHYS10121','PHYS10191','PHYS10302','PHYS10342','PHYS10352','PHYS10372','PHYS20101','PHYS20141','PHYS20161','PHYS20171','PHYS20252','PHYS20312','PHYS20352'}#define what must be passed e.g. lab, BSc dissertation.mustpass={'PHYS10180','PHYS10280',          'PHYS20180','PHYS20280',          'PHYS30180','PHYS30280','PHYS30880',          'PHYS40181','PHYS40182'}# these are where units may have different credits for the marks vs progression credweightunits={'PHYS20040':10,  # main general paper (doesn't count towards progression/resits, but does count towards marks)'PHYS20240':6,            # shorter version worth only 6 (M+P,Phys/Phil, 2nd/3rd year direct entry) 'PHYS20811':5,            # Professional development CD: changed from 9 to 5 in AY2021'PHYS30010':10,           # General paper (doesn't count towards progression/resits, but does count towards marks)'PHYS30210':6.           # General paper (short version for M+P, Phys/Phil, 2nd/3rd year direct entry)}#'PHYS20030':0,            # Peer-Assisted Study Sessions (PASS) - no marks, no credits, but here just in case #'ULGE21030':0,            # ***CHECK THESE BELOW - THEY ARE NOMINALLY CREDITED BUT REQUIRE ADDITINAL CODE (see older versions) #'ULFR21030':0,#'ULJA21020':0,#'ULRU11010':0,#'MATH35012':0,#'COMP39112':0,#'MATH49102':0}noresitlist={ 'PHYS20252', 'PHYS20312', 'PHYS20352','PHYS20811'}# BELOW IS JUST FOR TESTING !! ***REMOVE!!!credweightunits={'PHYS20040':10,'PHYS20240':6,'PHYS20811':9,'PHYS20821':5,'PHYS30010':10,'PHYS30210':6.,'PHYS30811':3,'PHYS20030':0,'ULGE21030':0,'ULFR21030':0,'ULJA21020':0,'ULRU11010':0,'MATH35012':0,'COMP39112':0,'MATH49102':0}    ################################################################################################################################################################################################# the key function. Reads the grid and returns analysis of the target student.def analysisstudentfinalyear(filename,targetstudent):    print("Analysing new student",targetstudent)    # read data with row 4 (starting from 0) as hesders to get right data    df=pd.read_csv(filename,skiprows= lambda x: +rowskiplogiccourse(x),dtype='str',encoding = "ISO-8859-1")        df = df.loc[:, ~df.columns.str.contains('^Unnamed')]    # remove bad characters    df = df.replace(np.nan, '', regex=True)    headers=list(df.columns.values)    dfheaders = pd.DataFrame(columns=headers)    #print(headers)        # useful : df.loc[(df[‘Color’] == ‘Green’) & (df[‘Shape’] == ‘Rectangle’)]    # select row with studentID= target    selected=df.loc[df['Emplid'] == targetstudent]    #print(selected)    # get index number of this ropw    selectedindex=selected.index    #print(targetstudent,selectedindex)    print('target student',targetstudent)    # extract course names (top row of target student in grid)    studata=(df.iloc[selectedindex])    # extract course marks (bottom row of target student in grid)    stumarks=(df.iloc[selectedindex+1])    #print(studata)    #print(stumarks)    # make studata into series    studata=studata.iloc[0]    # get prog    progtaken=studata[4]    print("setting prog taken",progtaken)    stumarks=stumarks.iloc[0]    # define a lot of variables for a given student. We return most of these    markspresent=0    creditstaken=0    creditspassed=0    creditspassedlab=0    creditsov30=0    creditspassedpreND=0    creditstakenpreND = 0    mean=0    meancredsum=0    creditsformeansum=0    credsatfirst=0    credsatupper2 = 0    credsatlower2 = 0# resit variables    someunitunder30=0    referredcore=' '    referredoption = ' '    deferredcore = ' '    deferredoption=' '    credittarget=120.    creditsexcluded=0    honours=0    degclass=-1    faillabprog=0    projectmark=-1.    project1mark=-1  # project mark for S1    project1cred=-1  # credit for project S1    project2mark=-1  # project mark for S2    project2cred=-1  # credit for project S2    mathunit=0        included=[]    coursesincludedcompletestring=' '    excluded=' '    NDmarkmath=-1.    NDmarkphil = -1.    excludeND=0    mathscreditstaken = 0.    mathscreditsmeansum = 0.    mathscreditspassed=0.    # maths sums. only relevant for maths/phys students.    if('Math' in progtaken):        mathsphys=1    else:        mathsphys = 0    # mathsphys=0 for physics student, =1 for maths/physics student    stuname =studata[1]    print("Name ",stuname)    # loop over student courses    for i in range(studata.size):        #print('New column:',studata[i])        # spot a valid course. (An upgrade would do this automatically)        if( (('PHYS' in studata[i] or'EART'in studata[i] or 'HSTM'in studata[i]  or 'UCOL'in studata[i] or 'MATH'in studata[i]            or 'BIOL'in studata[i] or 'PHIL'in studata[i] or 'UCIL'in studata[i] or 'ECON' in studata[i]                     or 'COMP' in studata[i] or 'BMAN' in studata[i] or 'HSTM' in studata[i] or 'MCEL' in studata[i] or 'MACE' in studata[i]            or 'ULBS' in studata[i] or 'ULCH' in studata[i] or 'ULIT' in studata[i] or 'ULPT' in studata[i]            or 'ULGE' in studata[i] or 'ULFR' in studata[i] or 'ULJA' in studata[i] or 'ULSP' in studata[i]             or   'ULAR' in studata[i] or 'ULBS' in studata[i] or 'ULCH' in studata[i] or 'ULDU' in studata[i] or 'ULFR' in studata[i]                or 'ULGE' in studata[i] or 'ULHB' in studata[i] or 'ULIT' in studata[i] or 'ULKR' in studata[i] or 'ULJA' in studata[i]                or 'ULPE' in studata[i] or 'ULPT' in studata[i] or 'ULRU' in studata[i] or 'ULSP' in studata[i] or 'ULTU' in studata[i]                or 'ULUR' in studata[i] or 'MUSC' in studata[i]))            ):            # reject 'MPHYS' column as it's not a course!            if(studata[i]=='MPHYS' or studata[i]=='MPHYSHON'): continue            # get course name            coursename = studata[i][0:9]            print('found course:',coursename)            # reset variables.            # exclude is MC exclusion.            excludethiscourse = 0            mainmarkfound = 0            profoundinsub=0            markcomponentsfound=0            mathunit = 0            thiscredit=0.            deferethiscourse=0            # if a mark ends R, remove R and use the mark (ignoring sub-marks)            if('R' in stumarks[i] and (not stumarks[i]=='PRO')):                print("Found R mark")                stumarks[i]=stumarks[i][:2]                print(stumarks[i])            if ('C' in stumarks[i] and (not stumarks[i] == 'PRO')):                print("Found compensated mark", stumarks[i])                stumarks[i] = stumarks[i][:2]                print(stumarks[i])            if (stumarks[i] == ''):                print("WARNING: no mark"+stuname)                continue            print('main mark found', float(stumarks[i]))            thismark = float(stumarks[i])            # get credits            # must be a straightforward mark or a progression            # dig out credits taken            lbindex = studata[i].find('(')            rbindex = studata[i].find(')')            # print(lbindex, rbindex)            # print(studata[i][lbindex+1:rbindex])            thiscredits = float(studata[i][lbindex + 1:rbindex])            print('using main mark credits ',thiscredits)            print(targetstudent,studata[i][0:9],stumarks[i],stumarks[i+1],thiscredit)            # credits for this course            creditsformean = thiscredits            print('creditsformean ',creditsformean)            # if zero credits, may need credits for credit weighted mean            if (creditsformean == 0 and not excludeND): # we might have zero credits for ND                creditsformean = credweightunits[coursename]            # print('Using ',creditsformean, ' credits for ',coursename)            # panic            if (creditsformean == 0):                print('I do not know the credit weight for the mean of ', coursename)            # include credits for vacation essay if S2 exams excluded            # give vacation essay credits as real credits if giverealcredits=1            if (coursename == "PHYS30811"):                thiscredits = creditsformean                studata[i] = 'PHYS30811 (3)'            if (coursename == "PHYS20811"):                thiscredits = creditsformean                studata[i] = 'PHYS20811 (5)'   # CD: 5 credits from AY2021            if (coursename == "PHYS20821"):                thiscredits = creditsformean                studata[i] = 'PHYS20821 (5)'            # end of sorting out a credit number            ######## exclusion            if (stumarks[i + 1] == 'X'):                print("exclude!")                excludethiscourse = 1                creditsexcluded+=creditsformean                excluded = excluded + coursename + ' '                stumarks[i]=stumarks[i]+'X'            if (stumarks[i ] == '40X'):                print("exclude!")                excludethiscourse = 1                creditsexcluded+=creditsformean                excluded = excluded + coursename + ' '                stumarks[i]=stumarks[i]+'X'            if (stumarks[i + 1] == 'XL'):                print("missed with a reason. exclude!")                excludethiscourse = 1                creditsexcluded += creditsformean                excluded = excluded + coursename + ' '                stumarks[i] = stumarks[i] + 'XL'            # deferral            if (stumarks[i + 1] == 'X1'):                print("deferred",coursename)                deferethiscourse = 1            if (stumarks[i + 1] == 'XN'): print("missed with no reason. NOT exclude!")            #####################	    # log the credits taken by the student, first for physics, then maths (if maths/phys)            creditstaken += thiscredits            if (mathunit == 1):                mathscreditstaken += thiscredits                print("maths credits added ", mathscreditstaken, thiscredits)            if (not excludethiscourse): creditsformeansum += creditsformean            markspresent+=1	    # update meancredsum (used for mean)            if(not excludethiscourse):                meancredsum+=thismark*creditsformean                               if(mathunit==1): mathscreditsmeansum+=thismark*creditsformean            # log credits above 40% and 30%            if thismark >= 40.:                creditspassed += thiscredits                print("Credits passed ",coursename,thiscredits,creditspassed)                if(coursename in mustpass):                    creditspassedlab+=thiscredits                if(mathunit):                    print('logging maths credits passed',coursename,thismark,thiscredits)                    mathscreditspassed+=thiscredits            if thismark >= 30.:                   creditsov30 += thiscredits            creditspassedpreND =creditspassed            creditstakenpreND = creditstaken            # has this course been failed when it must be passed i.e. lab,  project?            if (coursename in mustpass and thismark<40.):                   faillabprog = 1            # if any course is < 30%, resits trigged for 2nd year (also trigger resits in main program once have all unit data            if(thismark<30 and not coursename in noresitlist):                someunitunder30=1            # in case resits get triggered, log what would be referred.            if(thismark<40 and coursename in iscore and thiscredits>0):               if(not coursename in noresitlist):                    if (not deferethiscourse):                        referredcore = referredcore + coursename + ' '                    else:                        deferredcore =deferredcore + coursename + ' '            if (thismark < 30 and coursename not in iscore and thiscredits>0):                if (not coursename in noresitlist):                    if (not deferethiscourse):                        referredoption = referredoption + coursename + ' '                    else:                        deferredoption= deferredoption + coursename + ' '            # get project mark for the grid display and for future calls (e.g. algB).                        # ***DETAILS BELOW NOT FULLY IMPLEMENTED/TESTED YET (IN PROGRESS!)             if coursename == 'PHYS30880':                projectmark=thismark   # BSc dissertation                #print('***Project mark is ',thismark)                            if (coursename=='PHYS40181' and project1mark == -1):                project1mark=thismark  # S1                project1cred=thiscredits            elif (coursename=='PHYS40181' and project1mark >= 0):                project2mark=thismark # in case S1 is a different module (see below)                project2cred=thiscredits                            if (coursename=='PHYS40182' and project2mark == -1):                project2mark=thismark  # S2                project2cred=thiscredits            elif (coursename=='PHYS40182' and project2mark >= 0):                project1mark=thismark  # in case S2 is a different module (see below)                project1cred=thismark                              # for Phys/Phil who do an essay for one project - only worth 10 credits c.f. 20 credits for physics            if (coursename=='PHYS40000' and project1mark==-1):                project1mark=thismark                project1cred=thiscredits            elif (coursename=='PHYS40000' and project2mark==-1):                project2mark=thismark                project2cred=thiscredits                            # for Maths/Phys Maths projects only 15 credits c.f. 20 credits for physics            if (coursename=='MATH40011' and project1mark==-1):                project1mark=thismark                project1cred=thiscredits            if (coursename=='MATH40022' and project2mark==-1):                project2mark=thismark                project2cred=thiscredits                            # combine S1/S2 project marks when they are set (***are any just one mark in which case this needs to be taken into account!)            if (projectmark==-1 and project1mark > 0 and project2mark > 0): projectmark = ((project1mark*project1cred)+(project2mark*project2cred))/(project1cred+project2cred)                            # log credits at boundaries            if thismark >= 70.:                credsatfirst+=thiscredits            if thismark >= 60.:                credsatupper2 += thiscredits            if thismark >= 50.:                credsatlower2 += thiscredits    # compute mean credit sum    if(creditsformeansum>0):        meancredsum=meancredsum/creditsformeansum    else:        meancredsum=0    if(mathscreditstaken>0.):        print('maths mark calc:',mathscreditsmeansum,mathscreditstaken)        mathscreditsmeansum=mathscreditsmeansum/mathscreditstaken    else:        mathscreditsmeansum=0    dfheaders=dfheaders.append(studata)    dfheaders = dfheaders.append(stumarks)    # log data we have made in new columns in data frame    dfheaders['Credits Taken']=creditstaken    dfheaders['Credits Passed'] = creditspassed    dfheaders['Project Mark']=projectmark    dfheaders['Credits Excluded'] = creditsexcluded    dfheaders['Courses Included']=coursesincludedcompletestring    dfheaders['Courses Excluded'] = excluded    print('end of student routine')    return progtaken,mathsphys,meancredsum,mathscreditsmeansum,creditstaken,mathscreditstaken,creditspassed, mathscreditspassed,creditspassedlab, creditspassedpreND,creditstakenpreND,faillabprog, projectmark, excluded, creditsexcluded,credsatfirst, credsatupper2, credsatlower2, someunitunder30, referredcore,referredoption,deferredcore,deferredoption,dfheaders, NDmarkmath################################## extracts carry forward for target studendef getCF3rdYear(filename,targetstudent):    yearmark3=-1. #needs to be modified to read yearmark3 for maths/phys students    # get CF marks    print("doing CF",targetstudent, filename)    df = pd.read_csv(filename, skiprows=lambda x: +rowskiplogic(x), dtype='str', engine='python')    print('read file')    df = df.replace(np.nan, '', regex=True)    #print(df.head(20))    print('target student=',targetstudent)    selected = df.loc[df['Emplid'] == targetstudent]    print("selected data")    print(selected)    headers = list(df.columns.values)    dfheaders = pd.DataFrame(columns=headers)    #print(headers)    # get index number of this ropw    selectedindex = selected.index    print("reached here")    print(selected.index)    data=(df.iloc[selectedindex])    print("printing data")    print(data)    data=data.iloc[0]    print(data[3])    nofirstyear=0    #print(data[3])    if data[3]=='n/a' or data[3]=='':        data[3]='-1'    if data[4] == 'n/a' or data[4]=='':        data[4] ='-1'    if data[5] == 'n/a' or data[5] == '':        data[5] = '-1'    if data[6]=='n/a' or data[6]=='':        data[6]='-1'    if data[7] == 'n/a' or data[7]=='':        data[7] ='-1'    if data[8] == 'n/a' or data[8] == '':        data[8] = '-1'    #if(classyear==4):        #if data[9] == 'n/a' or data[9] == '':            #data[9] = '-1'    #print(data[3],data[4])    print('HERE')    phys1=float(data[3])    phys2=float(data[4])    phys3 = float(data[5])    maths1=float(data[6])    maths2=float(data[7])    maths3 = float(data[8])    if (classyear == 4):        #yearmark3=float(data[9])        yearmark3 = -1    #print('CF : ',phys1,phys2,phys3,maths1,maths2,maths3)#    return phys1,phys2,phys3,maths1,maths2,maths3    return phys1,phys2,phys3,maths1,maths2,maths3,yearmark3################################# combine year marks to overall mark.def getoverallmark(maths1,maths2,maths3,yearmark3,phys1, phys2,phys3,finalyearmark,finalyearmathsmark,finalyearphysicsmark,progtaken,force3yr):    overallmark=-1.    overallmathsmark=-1.    overallphysicsmark=-1.    # BSc    if( ( ('BSc' in progtaken) or force3yr==1) and not('Math'in progtaken)):        overallmark= 0.1*phys1+0.3*phys2+0.6*finalyearmark        if(phys1<0 and phys2>0): overallmark=0.333*phys2+0.666*finalyearmark # no first year mark, so direct entry        if(phys1<0 and phys2<0): overallmark = finalyearmark  # no first or second year mark, so direct entry        overallphysicsmark = overallmark    # BSc M/P    if( ( ('BSc' in progtaken) or force3yr==1) and 'Math'in progtaken):                 overallmark= 0.1*(phys1+maths1)/2.+0.3*(phys2+maths2)/2.+0.6*finalyearmark                         if(phys1<0 and phys2>0): overallmark=0.333*(phys2+maths2)/2.+0.666*finalyearmark # no first year mark, so direct entry                      overallphysicsmark = 0.1 * (phys1) + 0.3 * (phys2) + 0.6 * finalyearphysicsmark         if (phys1 < 0 and phys2 > 0): overallphysicsmark = 0.333 * phys2 + 0.666 * finalyearphysicsmark  # no first year mark, so direct entry         overallmathsmark = 0.1 * (maths1) + 0.3 * (maths2) + 0.6 * finalyearmathsmark         if (phys1 < 0 and phys2 > 0): overallmathssmark = 0.333 * maths2 + 0.666 * finalyearmathsmark  # no first year mark, so direct entry         print("computed BSc Maths overall mark ",phys1,phys2,maths1,maths2,finalyearmark,overallphysicsmark,overallmathsmark,overallmark)         #if(phys1<0 and phys2<0): overallmark = finalyearmark  # no first or second year mark, so direct entry. This should not happen    #  MPHYS    if ('MPhys' in progtaken and not('Math' in progtaken) and not force3yr):        print('MPHYS, not Maths')        overallmark = 0.06 * phys1 + 0.19 * phys2 + 0.375 * phys3 + 0.375*finalyearmark                if (phys1 < 0 and phys2 > 0): overallmark = 0.2*phys2+ 0.4*phys3 + 0.4*finalyearmark  # no first  year mark, so direct entry        if (phys1 < 0 and phys2 < 0): overallmark = 0.5*phys3 + 0.5*finalyearmark  # no first or second year mark, so direct entry        overallphysicsmark = overallmark    # MPHYS study in    if ( ('MPhys' in progtaken and not('Math' in progtaken) and 'Study' in progtaken)  and not force3yr):        print('MPHYS, study in')        overallmark = 0.08 * phys1 + 0.23 * phys2 + 0.23 * phys3 + 0.46*finalyearmark        # There are no Phys Europe 4th years this year.        # The problem is that the 4th years who were abroad last year are on the same programmes as the other students        # so there is nothing to differentiate them. I used to add a code to Peter’s        # program to flag this – [3A] at the end of the programme code on the input grid and discussed doing something similar this year with Rob.    if ('3A' in progtaken and not force3yr):        print("making a 3A deg calc")        overallmark = 0.08 * phys1 + 0.23 * phys2 + 0.23 * phys3 + 0.46 * finalyearmark    # MPHYS M/P.    if ('Phys' in progtaken and 'Math' in progtaken and not force3yr and not ('BSc' in progtaken)):        print('MPHYS,  Maths')        overallmark = 0.06 * (phys1+maths1)/2. + 0.19 * (phys2+maths2)/2. + 0.375 * yearmark3 + 0.375*finalyearmark                overallmathsmark =  0.06 * maths1 + 0.19 * maths2 + 0.375 * maths3 + 0.375*finalyearmathsmark                overallphysicsmark = 0.06 * phys1 + 0.19 * phys2 + 0.375 * phys3 + 0.375*finalyearphysicsmark                if (phys1 < 0 and phys2 > 0):                         overallmark = 0.2*(phys2+maths2)/2.+ 0.4*yearmark3 + 0.4*finalyearmark  # no first  year mark, so direct entry                       overallmathsmark = 0.2*maths2 + 0.4*maths3 + 0.4*finalyearmathsmark  # no first  year mark, so direct entry             overallphysicsmark = 0.2*phys2+ 0.4*phys3 + 0.4*finalyearphysicsmark  # no first  year mark, so direct entry        if (phys1 < 0 and phys2 < 0):                         overallmark = 0.5*yearmark3 + 0.5*finalyearmark  # no first or second year mark, so direct entry                           overallphysicsmark = 0.5*phys3 + 0.5*finalyearphysicsmark  # no first or second year mark, so direct entry                                       overallmathsmark = 0.5*maths3 + 0.5*finalyearmathsmark  # no first or second year mark, so direct entry          print('returning OM,OMM,OPM',overallmark, overallmathsmark, overallphysicsmark, progtaken)    return overallmark, overallmathsmark, overallphysicsmark################################# figures out overall degree class based on overall mark and credits passeddef getMPhysDegClass(overallmark, creditspassed):    # first    if  creditspassed>=creditstogetMPHYS and overallmark>=boundaryfirst:        honours=1        degclass=4    # 2:1    elif creditspassed>=creditstogetMPHYS and overallmark>=boundaryupper2 and overallmark<boundaryfirst:        honours = 1        degclass = 3    # 2:2    elif creditspassed>=creditstogetMPHYS and  overallmark>=boundarylower2 and overallmark<boundaryupper2:        honours = 1        degclass = 2    # no thirds in MPHYS    # fail    else:        honours=0        degclass=-1    #eligible for BSc on marks in first three years, return -1 in degclass to note this    return honours, degclass################### BSc class (a touch more complex than MPHYS class)def getBScDegClass(overallmark, creditspassed):    if  creditspassed>=creditstogetBScgood and overallmark>=boundaryfirst:        honours=1        degclass=4    elif creditspassed >= creditstogetBSclower and creditspassed <=creditstogetBScgood and overallmark >= boundaryfirst:        honours = 1        degclass = 3    elif creditspassed>=creditstogetBScgood and overallmark>=boundaryupper2 and overallmark<boundaryfirst:        honours = 1        degclass = 3    elif creditspassed>=creditstogetBSclower and creditspassed <=creditstogetBScgood and overallmark>=boundaryupper2 and overallmark<boundaryfirst:        honours = 1        degclass = 2    elif creditspassed>=creditstogetBScgood and  overallmark>=boundarylower2 and overallmark<boundaryupper2:        honours = 1        degclass = 2    elif creditspassed>=creditstogetBSclower and  creditspassed<creditstogetBScgood and overallmark>=boundarylower2 and overallmark<boundaryupper2:        honours = 1        degclass = 1    elif creditspassed >= creditstogetBSclower and overallmark >= boundarythird:        honours = 1        degclass = 1    elif creditspassed >= creditstogetBSclower:        honours =0        degclass=0    else:        honours=0        degclass=-1    return honours, degclass################### promote by Alg A? 1 or 0 (A = Stage 1 - by mark distribution - see section 12.5 of UG handbook)def algorithmA(progtaken,degclass,credsatfirst,credsatupper2,credsatlower2):    promote=0        if('BSc' in progtaken):        if(degclass==3 and credsatfirst>=creditstogetBScgood):            promote=1        if(degclass==2 and credsatupper2>=creditstogetBScgood):            promote=1        if(degclass==1 and credsatlower2>=creditstogetBScgood):            promote=1    else:        if (degclass == 3 and credsatfirst >= creditstogetMPHYS):            promote = 1        if (degclass == 2 and credsatupper2 >= creditstogetMPHYS):            promote = 1        if (degclass == 1 and credsatlower2 >= creditstogetMPHYS):            promote = 1                print("alg A ",promote,degclass,credsatfirst,credsatupper2,credsatlower2,creditstogetBScgood,creditstogetMPHYS)    return promote################### promote by alg B. yes/no (B = Stage 2  - criteria-based classification review - see section 12.5 of UG handbook)def algorithmB(progtaken,degclass,credsatfirst,credsatupper2,credsatlower2,finalyearmark,overallmark,projectmark):    promote=0    if('BSc' in progtaken):        if(degclass==3 and credsatfirst >= creditstogetBScgood-10 and projectmark>=boundaryfirst and finalyearmark>overallmark):            promote=1        if(degclass==2 and credsatupper2 >= creditstogetBScgood-10 and projectmark>=boundaryupper2 and finalyearmark>overallmark):            promote=1        if(degclass==1 and credsatlower2 >= creditstogetBScgood-10 and projectmark>=boundarylower2 and finalyearmark>overallmark):            promote=1    else:        if (degclass == 3 and credsatfirst >= creditstogetMPHYS-10 and projectmark >=boundaryfirst and finalyearmark > overallmark):            promote = 1        if (degclass == 2 and credsatupper2 >= creditstogetMPHYS-10 and projectmark >=boundaryupper2 and finalyearmark > overallmark):            promote = 1        if (degclass == 1 and credsatlower2 >= creditstogetMPHYS-10 and projectmark >=boundarylower2 and finalyearmark > overallmark):            promote = 1    return promote############################################################################################################################################################################################# NOW THE RUNNING PART OF THE CODE############################################################################################################################################################################################# open file and clean filedf = pd.read_csv(filename, skiprows=lambda x: +rowskiplogic(x), dtype='str',encoding = "ISO-8859-1")df = df.loc[:, ~df.columns.str.contains('^Unnamed')]df = df.replace(np.nan, '', regex=True)# Get all# select just IDs easily without a loop#sidsname=list(df.columns)[0]# get IDs. select column of IDs and then every other one using ::2#sids=(df.loc[:,sidsname])[::2]if(classyear==1):    print('taking all students in year 1')    #df=df[(df['Plan'].str.contains('MPhys')) | (df['Plan'].str.contains('BSc'))]    #df=df[(df['Plan'].str.contains('MPhys')) & (~df['Plan'].str.contains('Math'))]    # take all    #df = df[(df['Plan'].str.contains('MPhys')) | (df['Plan'].str.contains('BSc')) | (df['Plan'].str.contains('Math'))]    if (studtype == 1):        df = df[(df['Plan'].str.contains('MPhys')) | (df['Plan'].str.contains('BSc')) & (~df['Plan'].str.contains('Math'))]    else:        df = df[(df['Plan'].str.contains('Math'))]if(classyear==2):    if (studtype == 1):        df = df[(df['Plan'].str.contains('MPhys')) | (df['Plan'].str.contains('BSc')) & (~df['Plan'].str.contains('Math'))]    else:        df = df[(df['Plan'].str.contains('Math'))]if(classyear==31):# df=df[(df['Plan'].str.contains('MPhys')) | (df['Plan'].str.contains('Math'))]    if (studtype == 1):        df = df[(df['Plan'].str.contains('MPhys'))]    else:        df = df[(df['Plan'].str.contains('MMath'))]#  Select BScs without mathsif(classyear==32):    if(studtype==1):        df = df[(df['Plan'].str.contains('BSc')) & (df['Plan'].str.contains('Physics'))]    else:        df = df[(df['Plan'].str.contains('BSc')) & (df['Plan'].str.contains('Math'))]# select BSc maths#df=df[(df['Plan'].str.contains('BSc')) & (df['Plan'].str.contains('Math'))]# Select MPHYS no mathsif(classyear==4):    print ('analysing year 4')    if (studtype == 1):        df = df[(df['Plan'].str.contains('MPhys'))]    else:        df = df[(df['Plan'].str.contains('MMath'))]sidsname=list(df.columns)[0]sids=(df.loc[:,sidsname])#print(df)cohortmean=0cohortcount=0cohortcreditpassedmean=0cohortcredittakenmean=0numberfirsts=0numberupper2=0numberlower2=0numberthird=0numberordinary=0numberfail=0numberborderline=0numberPApromote=0numberPBpromote=0degclasschange=0degclasschangeup=0degclasschangedown=0degclass=-1# overall dataframe of all students.dftemp=pd.read_csv(filename,skiprows= lambda x: +rowskiplogic(x),dtype='str',encoding = "ISO-8859-1")dftemp = df.loc[:, ~df.columns.str.contains('^Unnamed')]dftemp = dftemp.replace(np.nan, '', regex=True)headers=list(dftemp.columns.values)newheaders=[]for s in headers:    if(not 'Unnamed' in s):        newheaders.append(s)dfallstudents= pd.DataFrame(columns=newheaders)#print('IDs read')#print(sids)# loop over IDsfor anid in sids:        print('**************')    print('doing student ID='+anid)# veto some students    if(anid in donotprocess):        continue# -2 means not set. -1 is a fail.    degclass=-2#            creditstogetMPHYS = 60#            creditstogetBScgood = 60#            creditstogetBSclower = 40#credits needed redefined as fractions of credits taken below    # needed for progression    fail=0    progress=0    resitstriggered=0    # fail is failed on credits    # faillabprof means failed lab or project    # get carry forward    if(deganalysis or classyear==31):        print("getting carryforward")        phys1, phys2, phys3,maths1,maths2,maths3,yearmark3  = getCF3rdYear(excelDir+CFfilename, anid)        #print(phys1,phys2,phys3,maths1,maths2,maths3)    # get all final year data for the student    print('calling stud ana for ',anid)    progtaken, mathsphys,finalyearmark, finalyearmathsmark,creditstaken,mathscreditstaken,creditspassed,mathscreditspassed,creditspassedlab, \    creditspassedpreND, creditstakenpreND,faillabprog, \    projectmark,excluded, creditsexcluded,credsatfirst, credsatupper2, credsatlower2, \    someunitunder30, referredcore,referredoption,deferredcore,deferredoption,dfthisstudent, NDmarkmath  \        = analysisstudentfinalyear(filename, anid)    print('Creds at first ',credsatfirst)    finalyearphysicsmark=-1.    # if a M/P student, get final year physics mark    if(finalyearmathsmark>0 and mathsphys==1):        #print(creditstaken,mathscreditstaken)        finalyearphysicsmark=(finalyearmark*creditstaken-finalyearmathsmark*mathscreditstaken)/(creditstaken-mathscreditstaken)    # final year mark to 1 d.p. ensuring no rounding to lower integer    finalyearmark = round(finalyearmark + 0.00000001, 1)    finalyearmathsmark = round(finalyearmathsmark + 0.00000001, 1)    finalyearphysicsmark = round(finalyearphysicsmark + 0.00000001, 1)        # borderlines for promotion consideration (changed for AY2020/2021)    borderfirst = 68.    borderupper2 = 58.    borderlower2 = 48.    borderthird = 37.    if(classyear==2):        # 2->3 progression rules        # we need a to pass 2/3 of credits taken, inc lab,        if(creditspassed<creditstaken*0.5):            fail=1            progress=0            resitstriggered=0            referredcore=' '            referredoption=' '        elif(someunitunder30==0 and faillabprog==0 and creditspassed>=creditstaken*(2./3.) ):            fail = 0            progress=1            resitstriggered=0            referredcore=' '            referredoption=' '        else:            fail = 0            progress=0            resitstriggered=1    if(classyear==31):        # 3 to 4 progression        # here we need the overall mark        overallmark, overallmathsmark, overallphysicsmark = getoverallmark(maths1, maths2, maths3, yearmark3, phys1,                                                                           phys2, phys3, finalyearmark,                                                                           finalyearmathsmark, finalyearphysicsmark,                                                                           progtaken,1)        overallmark = round(overallmark + 0.00000001, 1)        overallmathsmark = round(overallmathsmark + 0.00000001, 1)        overallphysicsmark = round(overallphysicsmark + 0.00000001, 1)        # 3->4 progression rules        # we need a to pass 2/3 of credits taken, inc lab,        if(faillabprog==0 and creditspassed>=creditstaken*(2./3.) and finalyearmark>50. and overallmark>50. ):            fail = 0            progress=1        else:            print("year 31 fail.",faillabprog,creditspassed,finalyearmark,phys3)            fail = 1            progress=0            # get BSC. need to code up    if(deganalysis):        overallmark, overallmathsmark, overallphysicsmark = getoverallmark(maths1,maths2,maths3,yearmark3,phys1, phys2, phys3,finalyearmark,finalyearmathsmark,finalyearphysicsmark, progtaken,0)        overallmark = round(overallmark + 0.00000001, 1)        overallmathsmark = round(overallmathsmark + 0.00000001, 1)        overallphysicsmark = round(overallphysicsmark + 0.00000001, 1)        print('OM, OPM, OMM:',overallmark, overallmathsmark, overallphysicsmark)        dfthisstudent['Credits to get BSc/MPhys Good'] = creditstogetBScgood        dfthisstudent['Credits to get BSc Lower'] = creditstogetBSclower        dfthisstudent['Credits at First'] = credsatfirst        dfthisstudent['Credits at Upper 2'] = credsatupper2        dfthisstudent['Credits to Lower 2'] = credsatlower2        dfthisstudent['Phys 1'] = phys1        dfthisstudent['Phys 2'] = phys2        dfthisstudent['Phys 3'] = phys3        dfthisstudent['Maths 1'] = maths1        dfthisstudent['Maths 2'] = maths2        dfthisstudent['Maths 3'] = maths3        dfthisstudent['Year 3 Mark'] = yearmark3        overallmark = float(round(Decimal(overallmark), 3))    dfthisstudent['Final Year Mark'] = finalyearmark    dfthisstudent['Final Year Maths Mark'] = finalyearmathsmark    dfthisstudent['Final Year Physics Mark'] = finalyearphysicsmark    if (deganalysis or classyear==31):        dfthisstudent['Overall Mark'] = overallmark        dfthisstudent['Overall Maths Mark'] = overallmathsmark        dfthisstudent['Overall Physics Mark'] = overallphysicsmark    if(classyear==2):        dfthisstudent['Credits to get BSc/MPhys Good'] = creditstogetBScgood        dfthisstudent['Credits to get BSc Lower'] = creditstogetBSclower        dfthisstudent['Maths Credits Taken'] = mathscreditstaken        dfthisstudent['Maths Credits Passed'] = mathscreditspassed        dfthisstudent['Fail'] = fail        dfthisstudent['Lab/Proj Fail'] = faillabprog        dfthisstudent['Progress'] = progress        dfthisstudent['Resits Triggered'] = resitstriggered        dfthisstudent['Mark Under 30'] = someunitunder30        dfthisstudent['Referrals Core'] = referredcore        dfthisstudent['Referrals Option'] =referredoption        dfthisstudent['Deferrals Core'] = deferredcore        dfthisstudent['Deferrals Option'] = deferredoption        dfthisstudent['Credits Passed pre-ND'] = creditspassedpreND        dfthisstudent['Credits Taken pre-ND'] =creditstakenpreND    if(classyear==31):        dfthisstudent['Credits to get BSc/MPhys Good'] = creditstogetBScgood        dfthisstudent['Credits to get BSc Lower'] = creditstogetBSclower        dfthisstudent['Phys 1'] = phys1        dfthisstudent['Phys 2'] = phys2        dfthisstudent['Maths 1'] = maths1        dfthisstudent['Maths 2'] = maths2        dfthisstudent['Fail'] = fail        dfthisstudent['Lab/Proj Fail'] = faillabprog        dfthisstudent['Progress'] = progress    if (deganalysis):        # get overall class        if('BSc'in progtaken):            honours, degclass = getBScDegClass(overallmark, creditspassed)        elif('MPhys' or 'Math' in progtaken):            honours, degclass = getMPhysDegClass(overallmark, creditspassed)        else:            print('Error : do not know degree type',anid,progtaken)        # cohort variables.        cohortmean+=overallmark        cohortcreditpassedmean+=creditspassed        cohortcredittakenmean+=creditstaken        cohortcount += 1        #print('degree class for ',anid,degclass)        #print(cohortcount)        #print('first=', numberfirsts, ' 2:1=', numberupper2, ' 2:2=', numberlower2, 'fails=', numberfail, ' Sum all=',            #numberfirsts + numberlower2 + numberupper2+numberfail)        borderline=-1.        algAprom = -1        algBprom = -1        # promtion.        if(doingborderline):            borderline=0            if( (overallmark >= borderfirst and overallmark <69.95) or (overallmark >= borderupper2 and overallmark <59.95) or (overallmark >= borderlower2 and overallmark <49.95) or (overallmark>=borderthird and overallmark<39.95)):                #borderline                #print('borderline')                borderline=1                numberborderline+=1                algAprom=0                algBprom=0                algAprom=algorithmA(progtaken,degclass,credsatfirst,credsatupper2,credsatlower2)                algBprom=algorithmB(progtaken,degclass, credsatfirst, credsatupper2, credsatlower2,finalyearmark,overallmark,projectmark)            if(borderline and (algAprom==1 or algBprom==1)):                # promote by algorithm A or B                #print('promote')                degclass+=1                                if(algAprom==1): numberPApromote+=1                if(algBprom == 1): numberPBpromote += 1        if(degclass==4.): numberfirsts += 1        if (degclass == 3.): numberupper2 += 1        if (degclass == 2.): numberlower2 += 1        if (degclass == 1.): numberthird += 1        if (degclass == 0.): numberordinary += 1        if (degclass==-1.): numberfail+=1        # also convert deg class to a string for output later        degclass_str = degclass_to_string(progtaken,degclass)        # Add P(A) or P(B) to deg class string if promoted ***CHECK THIS IS HOW IT WORKS!        if (algAprom == 1):            degclass_str = degclass_str + ' P(A)'        if (algAprom < 1 and algBprom == 1):            degclass_str = degclass_str + ' P(B)'                    # output to main data array        dfthisstudent['Deg Class ID'] = degclass        dfthisstudent['Deg Class'] = degclass_str        dfthisstudent['Honours'] = honours        dfthisstudent['Borderline'] =borderline        dfthisstudent['Alg A'] = algAprom        dfthisstudent['Alg B'] =algBprom    # append to main dataframe    dfallstudents = dfallstudents.append(dfthisstudent)    if (deganalysis==1):        print(anid,progtaken,creditstaken,creditspassed,creditstogetBScgood,creditstogetBSclower,phys1,phys2,phys3,finalyearmark,overallmark,projectmark,borderline,algAprom,algBprom,degclass)if(classyear==4 or classyear==32):    for ind in dfallstudents.index:        if(dfallstudents['Emplid'][ind]==''):            dfallstudents["Credits Taken"][ind] = ''            dfallstudents["Credits Passed"][ind] = ''            dfallstudents["Credits to get BSc/MPhys Good"][ind] = ''            dfallstudents["Credits to get BSc Lower"][ind] = ''            dfallstudents["Project Mark"][ind] = ''            dfallstudents["Final Year Mark"][ind] = ''            dfallstudents["Phys 1"][ind] = ''            dfallstudents["Phys 2"][ind] = ''            dfallstudents["Phys 3"][ind] = ''            dfallstudents["Maths 1"][ind] = ''            dfallstudents["Maths 2"][ind] = ''            dfallstudents["Maths 3"][ind] = ''            dfallstudents["Overall Mark"][ind] = ''            dfallstudents["Overall Maths Mark"][ind] = ''            dfallstudents["Overall Physics Mark"][ind] = ''            dfallstudents["Borderline"][ind] = ''            dfallstudents["Alg A"][ind] = ''            dfallstudents["Alg B"][ind] = ''            dfallstudents["Deg Class"][ind] = ''            dfallstudents["Courses Included"][ind] = ''            dfallstudents["Honours"][ind] = ''            dfallstudents["Courses Excluded"][ind] = ''            dfallstudents["Credits Excluded"][ind] = ''            dfallstudents["Final Year Maths Mark"][ind] = ''            dfallstudents["Final Year Physics Mark"][ind] = ''            dfallstudents["Year 3 Mark"][ind] = ''            dfallstudents['Credits at First'] = ''            dfallstudents['Credits at Upper 2'] = ''            dfallstudents['Credits to Lower 2'] = ''if(classyear==1):    for ind in dfallstudents.index:        if(dfallstudents['Emplid'][ind]==''):            dfallstudents["Credits Taken"][ind] = ''            dfallstudents["Credits Passed"][ind] = ''            dfallstudents["Final Year Mark"][ind] = ''            dfallstudents["Courses Excluded"][ind] = ''            dfallstudents["Courses Included"][ind] = ''            dfallstudents["Credits Excluded"][ind] = ''            dfallstudents["Final Year Maths Mark"][ind] = ''            dfallstudents["Final Year Physics Mark"][ind] = ''if(classyear==2):    for ind in dfallstudents.index:        if(dfallstudents['Plan'][ind]==''):            dfallstudents["Credits Taken"][ind] = ''            dfallstudents["Credits Passed"][ind] = ''            dfallstudents["Credits Taken pre-ND"][ind] = ''            dfallstudents["Credits Passed pre-ND"][ind] = ''            dfallstudents["Credits to get BSc/MPhys Good"][ind] = ''            dfallstudents["Credits to get BSc Lower"][ind] = ''            dfallstudents["Maths Credits Taken"][ind] = ''            dfallstudents["Maths Credits Passed"][ind] = ''            dfallstudents["Final Year Mark"][ind] = ''            dfallstudents["Courses Included"][ind] = ''            dfallstudents["Courses Excluded"][ind] = ''            dfallstudents["Credits Excluded"][ind] = ''            dfallstudents["Final Year Maths Mark"][ind] = ''            dfallstudents["Final Year Physics Mark"][ind] = ''            dfallstudents['Fail'][ind] = ''            dfallstudents['Lab/Proj Fail'][ind] = ''            dfallstudents['Progress'][ind] = ''            dfallstudents['Resits Triggered'][ind] = ''            dfallstudents['Referrals Core'][ind] = ' '            dfallstudents['Referrals Option'][ind] = ''            dfallstudents['Deferrals Core'][ind] = ' '            dfallstudents['Deferrals Option'][ind] = ''            dfallstudents['Mark Under 30'][ind] = ''if(classyear==31):    for ind in dfallstudents.index:        if(dfallstudents['Emplid'][ind]==''):            dfallstudents['Fail'][ind] = ' '            dfallstudents['Lab/Proj Fail'][ind] = ' '            dfallstudents['Progress'][ind] = ' '            dfallstudents["Credits Taken"][ind] = ''            dfallstudents["Credits Passed"][ind] = ''            dfallstudents['Courses Included'][ind] = ' '            dfallstudents['Courses Excluded'][ind] = ' '            dfallstudents['Final Year Mark'][ind] = ' '            dfallstudents['Final Year Maths Mark'][ind] = ' '            dfallstudents['Overall Mark'][ind] = ' '            dfallstudents["Credits to get BSc/MPhys Good"][ind] = ''            dfallstudents["Credits to get BSc Lower"][ind] = ''            dfallstudents["Phys 1"][ind] = ''            dfallstudents["Phys 2"][ind] = ''            dfallstudents["Maths 1"][ind] = ''            dfallstudents["Maths 2"][ind] = ''            dfallstudents["Overall Maths Mark"][ind] = ''            dfallstudents["Overall Physics Mark"][ind] = ''            dfallstudents["Project Mark"][ind] = ''            dfallstudents["Credits Excluded"][ind] = ''if(deganalysis):    print('No exclusions and standard 80/60 rules:\n')    print('Cohort count=',cohortcount,' Cohort mean=',cohortmean/cohortcount)    print('Mean credits taken=',cohortcredittakenmean/cohortcount,' Mean credits passed=',cohortcreditpassedmean/cohortcount)    print('first=',numberfirsts,' 2:1=',numberupper2,' 2:2=',numberlower2, ' Sum honours=',numberfirsts+numberlower2+numberupper2)    print('thirds (BSc)=',numberthird,' ordinary (BSc)=',numberordinary)    print('borderline=',numberborderline,' number algorithmA=',numberPApromote,' number algorithmB=',numberPBpromote)    print('fails=',numberfail,' Sum all=',numberfirsts+numberlower2+numberupper2+numberthird+numberordinary+numberfail)#for col in dfallstudents.columns:    #print(col)# print to griddel df['PSI']#for col in dfallstudents.columns:    #print(col)# final yearif(classyear==4):    if (studtype == 1):        filename='TESTFinalYearMPHYS.AY2021.prelimfinal.xlsx'        dfallstudents.to_excel(filename,columns=["Name",                                                "Plan",                                                "Unit 1",                                                "Unit 2",                                                "Unit 3",                                                "Unit 4",                                                "Unit 5",                                                "Unit 6",                                                "Unit 7",                                                "Unit 8",                                                "Unit 9",                                                "Unit 10",                                                "Unit 11",                                                "Credits Taken",                                                "Credits Passed",                                                "Phys 1",                                                "Phys 2",                                                "Phys 3",                                                "Final Year Mark",                                                "Overall Mark",                                                "Project Mark",                                                "Borderline",                                                "Alg A",                                                "Alg B",                                                "Deg Class",                                                "Courses Included",                                                "Courses Excluded",                                                "Credits Excluded"])    else:        filename = 'TESTFinalYearMMath.AY2021.prelimfinal.xlsx'        dfallstudents.to_excel(filename,columns=["Name",                                                "Plan",                                                "Unit 1",                                                "Unit 2",                                                "Unit 3",                                                "Unit 4",                                                "Unit 5",                                                "Unit 6",                                                "Unit 7",                                                "Unit 8",                                                "Unit 9",                                                "Unit 10",                                                "Unit 11",                                                "Credits Taken",                                                "Credits Passed",                                                "Phys 1",                                                "Phys 2",                                                "Phys 3",                                                "Maths 1",                                                "Maths 2",                                                "Maths 3",                                                "Year 3 Mark",                                                "Final Year Mark",                                                "Overall Mark",                                                "Final Year Maths Mark",                                                "Final Year Physics Mark",                                                "Project Mark",                                                "Borderline",                                                "Alg A",                                                "Alg B",                                                "Deg Class",                                                "Courses Included",                                                "Courses Excluded",                                                "Credits Excluded"])    # final yearif(classyear==32):    if (studtype == 1):        filename='TESTFinalYearBScPhys.AY2021.prelimfinal.xlsx'        dfallstudents.to_excel(filename,columns=["Name",                                                "Plan",                                                "Unit 1",                                                "Unit 2",                                                "Unit 3",                                                "Unit 4",                                                "Unit 5",                                                "Unit 6",                                                "Unit 7",                                                "Unit 8",                                                "Unit 9",                                                "Unit 10",                                                "Unit 11",                                                "Credits Taken",                                                "Credits Passed",                                                "Phys 1",                                                "Phys 2",                                                "Phys 3",                                                "Overall Mark",                                                "Project Mark",                                                "Borderline",                                                "Alg A",                                                "Alg B",                                                "Deg Class",                                                "Courses Included",                                                "Courses Excluded",                                                "Credits Excluded",                                                "Credits at First",                                                "Credits at Upper 2",                                                "Credits to Lower 2"])    else:        filename = 'TESTFinalYearBScMathsPhys.AY2021.prelimfinal.xlsx'        dfallstudents.to_excel(filename,columns=["Name",                                                "Plan",                                                "Unit 1",                                                "Unit 2",                                                "Unit 3",                                                "Unit 4",                                                "Unit 5",                                                "Unit 6",                                                "Unit 7",                                                "Unit 8",                                                "Unit 9",                                                "Unit 10",                                                "Unit 11",                                                "Credits Taken",                                                "Credits Passed",                                                "Phys 1",                                                "Phys 2",                                                "Phys 3",                                                "Maths 1",                                                "Maths 2",                                                "Maths 3",                                                "Final Year Mark",                                                "Overall Mark",                                                "Final Year Maths Mark",                                                "Final Year Physics Mark",                                                "Project Mark",                                                "Borderline",                                                "Alg A",                                                "Alg B",                                                "Deg Class",                                                "Courses Included",                                                "Courses Excluded",                                                "Credits Excluded",                                                "Credits at First",                                                "Credits at Upper 2",                                                "Credits to Lower 2"])# 1st to secondif (classyear == 1):    if (studtype == 1):        filename="TEST1styearPhysics.AY2021.prelimfinal.xlsx"    else:        filename = "TEST1styearMathsPhysics.AY2021.prelimfinal.xlsx"    dfallstudents.to_excel(filename,columns=["Name",                                            "Plan",                                            "Credits Taken",                                            "Credits Passed",                                            "Final Year Mark" ])# 2nd to 3rd progressionif (classyear == 2):    if (studtype == 1):        filename="TEST2ndyearPhysics.AY2021.prelimfinal.xlsx"        dfallstudents.to_excel(filename,columns=["Name",                                    "Credits Taken",                                    "Credits Passed",                                     "Final Year Mark",                                     "Fail",                                     'Lab/Proj Fail',                                     'Progress',                                     'Resits Triggered',                                     'Mark Under 30',                                     'Referrals Core',                                     'Referrals Option',                                     'Deferrals Core',                                     'Deferrals Option',                                     "Courses Included",                                    "Courses Excluded",                                    "Credits Excluded",                                    "Credits Taken pre-ND",                                    "Credits Passed pre-ND"])    else:        filename = "TEST2ndyearMathsPhysics.AY2021.prelimfinal.xlsx"        dfallstudents.to_excel(filename,columns=["Name",                                    "Credits Taken",                                    "Credits Passed",                                     'Maths Credits Taken',                                     'Maths Credits Passed',                                     "Final Year Mark",                                     "Final Year Maths Mark",                                     "Final Year Physics Mark",                                     "Fail",                                     'Lab/Proj Fail',                                     'Progress',                                     'Resits Triggered',                                     'Mark Under 30',                                     'Referrals Core',                                     'Referrals Option',                                     'Deferrals Core',                                     'Deferrals Option',                                     "Courses Included",                                    "Courses Excluded",                                    "Credits Excluded",                                    "Credits Taken pre-ND",                                    "Credits Passed pre-ND"])# 2nd to 3rd progressionif (classyear == 31):    if (studtype == 1):        filename='TEST3rdyearMPHYS.AY2021.prelimfinal.xlsx'    else:        filename = 'TEST3rdyearMMath.AY2021.prelimfinal.xlsx'    dfallstudents.to_excel(filename,                              columns=["Name",                                    "Plan",                                    "Credits Taken",                                    "Credits Passed",                                    "Phys 1",                                    "Phys 2",                                    "Maths 1",                                    "Maths 2",                                    "Final Year Mark",                                    "Final Year Maths Mark",                                    "Courses Included",                                    "Courses Excluded",                                    "Credits Excluded"])#file.close()